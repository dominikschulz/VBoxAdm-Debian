#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use Getopt::Long;
use Config::Std;
use Sys::Syslog;

use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';

my $db_host = 'localhost';
my $db_user = 'vacation';
my $db_pass = '';
my $db_port = 3306;
my $db_db   = 'vboxadm';

my ( $conffile_used, @hooks, %hook, %config, );

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
);

GetOptions(
    'sender|s=s'    => \$config{'sender'},
    'recipient|r=s' => \$config{'recipient'},
    'verbose|v+'    => \$config{'verbose'},

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or &usage();

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

# recipient must be "unrolled", it's smth. like "user#domain.tld@vacation.domain.tld" -> "user@domain.tld"
if ( $config{'recipient'} ) {
    my $unrolled = &VBoxAdm::Utils::unroll_recipient( $config{'recipient'} );
    if ($unrolled) {
        $config{'orig-recipient'} = $config{'recipient'};
        $config{'recipient'}      = $unrolled;
    }
}

$db_host = $config{'default'}{'dbhost'} || $db_host;
$db_user = $config{'default'}{'dbuser'} || $db_user;
$db_pass = $config{'default'}{'dbpass'} || $db_pass;
$db_port = $config{'default'}{'dbport'} || $db_port;
$db_db   = $config{'default'}{'dbdb'}   || $db_db;
my $notify_interval = $config{'vacation'}{'notify_interval'} || 7;    # default to seven days = one week
$notify_interval = $notify_interval * 24 * 3600;

my $vacation_domain = $config{'vacation'}{'domain'} || 'autoreply.domain.tld';

# Check options
die("No sender given on command line!")    if !$config{'sender'};
die("No recipient given on command line!") if !$config{'recipient'};

binmode( STDIN, ':utf8' );

openlog( 'vboxadm-vacation', 'ndelay,nofatal', 'mail' );

###
# Parse incoming mail
###
# Extract the interesting header values and abort processing when the header ends.
my %header = ();
my %status = ();

while ( my $line = <> ) {
    last if ( $line =~ /^$/ );    # end of header, skip the body
    $line =~ /^From:\s+(.*)$/i                  and $header{'from'}              = $1;
    $line =~ /^To:\s+(.*)$/i                    and $header{'to'}                = $1;
    $line =~ /^CC:\s+(.*)$/i                    and $header{'cc'}                = $1;
    $line =~ /^Bcc:\s+(.*)$/i                   and $header{'bcc'}               = $1;
    $line =~ /^Resent-To:\s+(.*)$/i             and $header{'resent-to'}         = $1;
    $line =~ /^Resent-CC:\s+(.*)$/i             and $header{'resent-cc'}         = $1;
    $line =~ /^Resent-Bcc:\s+(.*)$/i            and $header{'resent-bcc'}        = $1;
    $line =~ /^Reply-to:\s+(.*)$/i              and $header{'reply-to'}          = $1;
    $line =~ /^Subject:\s+(.*)$/i               and $header{'subject'}           = $1;
    $line =~ /^Return-Path:\s+<?([^>]+)>?$/i    and $header{'return-path'}       = $1;
    $line =~ /^Auto-Submitted:\s+(.*)$/i        and $header{'auto-submitted'}    = lc($1);
    $line =~ /^X-Loop:\s+VBoxAdm-Vacation\s+$/i and $status{'is-loop'}           = 1;
    $line =~ /^List-.*:/i                       and $status{'is-list'}           = 1;
    $line =~ /^Message-Id:\s+<([^>]+)>/i        and $header{'msg-id'}            = $1;
    $line =~ /^X-Spam-(Flag|Status):\s+YES/i    and $header{'x-spam-status'}     = 1 and $status{'is-spam'} = 1;
    $line =~ /^X-Facebook-Notify:/i             and $header{'x-facebook-notify'} = 1;
    $line =~ /^Precedence:\s+(bulk|list|junk)/i and $header{'precedence'}        = $1;
    $line =~ /^(X-(Barracuda-)?Spam-Status):\s+(Yes)/i                        and $header{$1} = $3 and $status{'is-spam'} = 1;
    $line =~ /^(X-Dspam-Result):\s+(spam|bl[ao]cklisted)/i                    and $header{$1} = $3 and $status{'is-spam'} = 1;
    $line =~ /^(X-(Anti|Avas-)?virus-status):\s+(infected)/i                  and $header{$1} = $3 and $status{'is-spam'} = 1;
    $line =~ /^(X-(Avas-spam|Spamtest|CRM114|Razor|Pyzor)-status):\s+(Spam)/i and $header{$1} = $3 and $status{'is-spam'} = 1;
    $line =~ /^(X-OSBF-LUA-Score):\s+[0-9\/\.\-\+]+\s+\[([-S])\]/i            and $header{$1} = $3 and $status{'is-spam'} = 1;
}

###
# DO NOT RESPOND IF:
###

# Loops:
# $is_loop
if ( $status{'is-loop'} ) {
    syslog( 2, 'Detected Loop - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# Bounces:
# $from =~ /(MAILER-DAEMON|postmaster|Mail Delivery System|E-postsystemet|Delivery Subsystem|Mailer_Daemon)/i
# $subject =~ /(Undeliver|Returned|returning|failure|failed|Delivery (Status )?Notification|fehlgeschlagen|remise|rejected|nicht zustellbar|Unzustellbar|Unbekannt|DSN|Benachrichtung|problem|falla|Zurückgeschickte Mail|Nondeliverable mail|Kan ikke leveres)/i
if ( $header{'from'} && $header{'from'} =~ /(MAILER-DAEMON|postmaster|Mail Delivery System|E-postsystemet|Delivery Subsystem|Mailer_Daemon)/i ) {
    syslog( 2, 'Detected Bounce - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# Vacation:
# $subject =~
# /(abwesen|vacation|Out of Office|reply|ist au.er Haus|Vielen Dank für Ihre E-Mail|Out-of-office|Deine E-Mail|Ihre Nachricht|Semestersvar|Feriesvar|R.ponse en cas d.absence|Risposta di assenza)/i
if (   $header{'subject'}
    && $header{'subject'} =~
/(abwesen|vacation|Out of Office|reply|ist au.er Haus|Vielen Dank für Ihre E-Mail|Out-of-office|Deine E-Mail|Ihre Nachricht|Semestersvar|Feriesvar|R.ponse en cas d.absence|Risposta di assenza)/i
  )
{
    syslog( 2, 'Detected Vacation Message - From: %s - To: %s - Subject: %s - Exiting', $config{'sender'}, $config{'recipient'}, $header{'subject'} );
    closelog();
    exit 0;
}

# Delays:
# $from && $subject && $from =~ /(mailer|Mail Delivery System)/i && $subject =~ /(delay|warning)/i
if (   $header{'from'}
    && $header{'subject'}
    && $header{'from'} =~ m/(mailer|Mail Delivery System)/i
    && $header{'subject'} =~ m/(delay|warning)/i )
{
    syslog( 2, 'Detected Delay Message - From: %s - To: %s - Subject: %s - Exiting', $config{'sender'}, $config{'recipient'}, $header{'subject'} );
    closelog();
    exit 0;
}

# Auto-Generated Messages:
# $is_list || ( $auto_submitted && $auto_submitted ne "no" ) || ( $from && $from eq "<>" )
if (   $status{'is-list'}
    || ( $header{'auto-submitted'} && $header{'auto-submitted'} ne 'no' )
    || ( $header{'from'} && $header{'from'} eq '<>' ) )
{
    syslog( 2, 'Detected Auto-Submitted Message - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# Spam:
# $from && $subject && $subject =~ m/(\*\*\*SPAM\*\*\*|WW Spam: high)
# $status{'is-spam'}
if ( $status{'is-spam'} ) {
    syslog( 2, 'Detected SPAM - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# Facebook:
# $header{'x-facebook-notify'}
if ( $header{'x-facebook-notify'} ) {
    syslog( 2, 'Detected Facebook Notify - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# Precedence:
# $header{'precedence'}
if ( $header{'precedence'} ) {
    syslog( 2, 'Detected Precedence Header (%s) - From: %s - To: %s - Exiting', $header{'precedence'}, $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# No Return-Path:
# !$header{'return-path'}
if ( !$header{'return-path'} ) {
    syslog( 2, 'Missing Return-Path - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# recipient address must be contained in either: to, cc, bcc, resent-to, resent-cc or resent-bcc
# This doesn't work with aliases. Disabled until a final descission was made how to handle this case.
#if ( !&check_recipient( $config{'recipient'}, \%header ) ) {
#    syslog( 2, 'Envelope-To Recipient not found in one of To, CC, BCC, Resent-To, Resent-CC or Reset-BCC - From: %s - To: %s - Exiting',
#        $config{'sender'}, $config{'recipient'} );
#    closelog();
#    exit 0;
#}

my %reply_header = ();

# sent respone to Return-Path if set, of Reply-To if set or From as last resort
$reply_header{'To'} = undef;
if ( $header{'return-path'} ) {
    $reply_header{'To'} = $header{'return-path'};
}
elsif ( $header{'reply-to'} ) {
    $reply_header{'To'} = $header{'reply-to'};
}
elsif ( $header{'from'} ) {
    $reply_header{'To'} = $header{'from'};
}
elsif ( $config{'sender'} ) {
    $reply_header{'To'} = $config{'sender'};
}
else {
    syslog( 2, 'Could not find a valid sender address - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    exit 0;
}

# set sender to (local) recipient
$reply_header{'From'} = undef;
$reply_header{'From'} = $config{'recipient'};

# set X-Loop: VBoxAdmVacation
$reply_header{'X-Loop'} = 'VBoxAdm-Vacation';

# set Auto-Submitted: auto-replied
$reply_header{'Auto-Submitted'} = 'auto-replied';

# set references/in-reply-to, if we found a message id
if ( $header{'msg-id'} ) {
    $reply_header{'In-Reply-To'} = $header{'msg-id'};
    $reply_header{'References'}  = $header{'msg-id'};
}

# if all these preconditions succeed:
my $dsn = "DBI:mysql:host=$db_host;database=$db_db;port=$db_port;user=$db_user;password=$db_pass";
my $dbh = &VBoxAdm::DB::connect($dsn);

if ( !$dbh ) {
    syslog( 2, 'Could not connect to database with DSN %s - From: %s - To: %s - Exiting', $dsn, $config{'sender'}, $config{'recipient'} );
    closelog();
    die("Could not connect to database with DSN $dsn");
}

# check vacation_blacklist which lists senders (or parts thereof) which are never notified although they pass the tests above
if ( &is_blacklisted( $dbh, $config{'sender'} ) ) {
    syslog( 2, 'Sender %s is blacklisted in DB.', $config{'sender'} );
    closelog();
    $dbh->disconnect();
    exit 0;
}

# check if vacation is (still) active
if ( !&is_on_vacation( $dbh, $config{'recipient'} ) ) {
    syslog(
        2,
'Recipient %s is no longer on vacation. Not sending reply. Check your MTA configuration! Vacation Script should not be invoked if the recipient is not on vacation.',
        $config{'recipient'}
    );
    closelog();
    $dbh->disconnect();
    exit 0;
}

# check notification sent within ... (see above)
if ( &already_notified( $dbh, $config{'recipient'}, $config{'sender'}, $notify_interval ) ) {
    syslog( 2, 'Already notified - From: %s - To: %s - Exiting', $config{'sender'}, $config{'recipient'} );
    closelog();
    $dbh->disconnect();
    exit 0;
}

# send msg
&send_vacation_mail( $dbh, $config{'recipient'}, \%reply_header );

closelog();
$dbh->disconnect();
exit 0;

###########################################################################
# Subs
###########################################################################
# Usage      : my $status = &is_blacklisted($dbh, 'user@domain.tld');
# Purpose    : Determine if this use should not get an reply.
# Returns    : Returns true if this user is blacklisted.
# Parameters : DBH and an email address.
# Throws     : n/a
# Comments   : This sub could be refactored to an Vacation module.
# See Also   : n/a
sub is_blacklisted {
    my $dbh    = shift;
    my $sender = shift;

    my ( $local_part, $domain ) = split /@/, $sender;

    # check vacation_blacklist which lists senders (or parts thereof) which are never notified although they pass the other tests before
    my $query = "SELECT COUNT(*) FROM vacation_blacklist WHERE domain = ? AND local_part = ?";
    my $sth   = &VBoxAdm::DB::prepexec( $dbh, $query, $domain, $local_part );
    my $count = $sth->fetchrow_array();

    # add wildcard query count
    # *@domain
    $sth->execute( $domain, '*' );
    $count += $sth->fetchrow_array();
    $sth->finish();

    # localpart@*
    $sth->execute( '*', $local_part );
    $count += $sth->fetchrow_array();
    $sth->finish();

    return $count;
}
############################################
# Usage      : my $status = &is_on_vacation($dbh, 'user@domain.tld');
# Purpose    : Determine if a local user is on vacation.
# Returns    : True if the user is question is known and on vacation.
# Parameters : DBH and an email address of a local user.
# Throws     : n/a
# Comments   : This sub could be refactored to an User module.
# See Also   : n/a
sub is_on_vacation {
    my $dbh       = shift;
    my $recipient = shift;

    # if the user is not found or not on vacation count will be zero which is false wrt. to perl
    my $query = "SELECT COUNT(*) FROM mailboxes AS ma LEFT JOIN domains AS d ON ma.domain_id = d.id ";
    $query .= "WHERE is_on_vacation AND CONCAT(ma.local_part,'\@',d.name) = ? ";

    # this part of the where clause covers a) infinite vacations, b) finite vacations w/ a lower bound and no upper bound and c)
    # finite vacations w/ a lower and upper bound
    $query .= "AND (ma.vacation_start = '0000-00-00' OR NOW() >= ma.vacation_start) AND (ma.vacation_end = '0000-00-00' OR ma.vacation_end >= NOW())";
    my $sth = &VBoxAdm::DB::prepexec( $dbh, $query, $recipient );
    my $count = $sth->fetchrow_array();

    $sth->finish();
    return $count;
}
############################################
# Usage      : my $status = &check_recipient('user@domain.tld', $header_ref);
# Purpose    : Determine if the message we really adressed to this mailbox, i.e. do
# not send replies to shady alias redirections et. al.
# Returns    : True if the recipient is contained within one of the following headers:
# To, CC, BCC, Resent-To, Resent-CC or Resent-BCC
# Parameters : Recipient and reference to Header hash
# Throws     : n/a
# Comments   : This sub could be refactored to a Vacation/utility module.
# See Also   : n/a
sub check_recipient {

    # recipient address must be contained in either: to, cc, bcc, resent-to, resent-cc or resent-bcc
    my $recipient  = shift;
    my $header_ref = shift;

    my $found_recipient = 0;

    # Check each header in question ...
    foreach my $hdr (qw(to cc bcc resent-to resent-cc resent-bcc)) {
        if ( $header{$hdr} ) {

            # Each header may consist of several recipients, so unfold it first ...
            foreach my $dest ( &VBoxAdm::Utils::extract_recipients( $header{$hdr} ) ) {
                if ( $recipient =~ m/^$dest$/i ) {
                    return 1;
                }
            }
        }
    }

    return;
}
############################################
# Usage      : my $status = &already_notified($dbh, $recipient, $sender, $interval);
# Purpose    : Determine if this sender was already notified for this recipient.
# Returns    : True if we did already send a notification within the interval.
# Parameters : DBH, (local) recipient, (remote) sender and the re-notification interval.
# Throws     : n/a
# Comments   : n/a
# See Also   : n/a
sub already_notified {
    my $dbh             = shift;
    my $to              = shift;
    my $from            = shift;
    my $notify_interval = shift;

    # Notification sent within $notify_interval seconds
    # SQL: SELECT COUNT(*) FROM vacation_notify WHERE on_vacation = recipient AND notified = sender AND notified_at <= NOW() - $notify_interval;
    my $sql = "SELECT COUNT(*) FROM vacation_notify WHERE on_vacation = ? AND notified = ? AND notified_at <= NOW() - ?";
    my $sth = $dbh->prepare($sql);
    if ( $sth->execute( $to, $from, $notify_interval ) ) {
        my $count = $sth->fetchrow_array();
        $sth->finish();
        if ( $count > 0 ) {
            return 1;
        }
        else {
            return;
        }
    }
    else {

        # if in doubt, assume we've already sent a notification
        # better not respond than sending too much
        $sth->finish();
        return 1;
    }
}
############################################
# Usage      : &send_vacation_mail($dbh, $recipient, $header_ref)
# Purpose    : Send a vacation mail to the given recipient (the former sender ;( )
# Returns    : True if the mail could be sent.
# Parameters : DBH, Recipient of the notification and the header hashref.
# Throws     : n/a
# Comments   : n/a
# See Also   : n/a
sub send_vacation_mail {
    my $dbh        = shift;
    my $recipient  = shift;
    my $header_ref = shift;

    # get vacation subj and vacation msg
    my $sql =
"SELECT vacation_subj, vacation_msg FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE CONCAT(m.local_part,'\@',d.name) = ? AND is_on_vacation";
    my $sth = $dbh->prepare($sql);

    if ( $sth->execute($recipient) ) {
        my ( $subj, $msg ) = $sth->fetchrow_array();

        if ( !$subj || !$msg ) {
            syslog( 2, 'send_vacation_mail - Recipient: %s - No Vacation Subject or Message found in DB. Aborting.', $recipient );
            return;
        }

        $header_ref->{'Subject'} = $subj;

        my $mail = '';
        foreach my $key ( keys %{$header_ref} ) {
            $mail .= ucfirst($key) . ': ' . $header_ref->{$key} . "\r\n";
        }
        $mail .= "\r\n";
        $mail .= $msg;

        &VBoxAdm::Utils::sendmail( $header_ref->{'From'}, $mail );
        syslog( 2, "send_vacation_mail - Sent vacation reply to %s on behalf of %s", $header_ref->{'To'}, $recipient );
        return 1;
    }
    else {

        # log error
        syslog( 2, 'send_vacation_mail - Recipient: %s - SQL-Error. Aborting.', $recipient );
        return;
    }
}
__END__

=head1 NAME

vacation - Vacation autoresponder for VBoxAdm

=head1 VERSION

This documentation refers to VBoxAdm vacation version @VERSION@
built on @BUILDDATE@.

=head1 DESCRIPTION

See http://tools.ietf.org/html/rfc3834

This script implements the vacation functionality of VBoxAdm. If your MTA
is configured correctly it will forward any message received for a user
which is labeled as being on vacation in the db to this script. It will
then perform a number of checks to verify that the mails came from
an actual user and then reply to this mail with the configured subject
and message. The script tries to be RFC complient, especially RFC 3834,
and will notify each user only once during the configured notification
interval. It tries to set appropriate headers (Auto-Submitted, References,
In-Reply-To, et. al.).

=head1 CONFIGURATION AND ENVIRONMENT

The configuration file should be place either in /etc/vboxadm.conf or
in /etc/vboxadm/vboxadm.conf. This is a common configuration file
for the whole suite of VBoxAdm applications. Each part of this suite
has its own section in the config file and all use the values
from the default section when appropriate.

=head2 default
The default section should contain at least the database configuration.

dbuser - The user used to connect to the MySQL database.
dbpass - This users password.
dbdb - The db used by this application.
dbhost - The MySQL database host, usually localhost.

=head2 vacation

notify_interval - The time between subsequent notifies for one user in seconds.

=head1 DEPENDENCIES

VBoxAdm::Utils, DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
