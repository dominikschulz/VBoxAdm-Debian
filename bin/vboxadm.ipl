#!/usr/bin/perl
use strict;
use warnings;

use English qw(-no_match_vars);

use CPAN;
use DBI;
use Getopt::Long;
use File::Temp;
use Config::Std;
use Crypt::GeneratePassword;
use Net::Domain;
use Net::SMTP;
use Net::POP3;
use Net::IMAP::Client;

use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';
use VBoxAdm::Migration '@VERSION@';
use VBoxAdm::DovecotPW '@VERSION@';
use VBoxAdm::API::Alias '@VERSION@';
use VBoxAdm::API::AWL '@VERSION@';
use VBoxAdm::API::Domain '@VERSION@';
use VBoxAdm::API::DomainAlias '@VERSION@';
use VBoxAdm::API::Mailbox '@VERSION@';
use VBoxAdm::API::VacationBlacklist '@VERSION@';
use VBoxAdm::L10N '@VERSION@';

my ( $conffile_used, %config, @modes, $opts );
$opts = {};

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
);

GetOptions(
    'verbose|v+'    => \$config{'verbose'},
    'dry|d!'        => \$config{'dry'},
    'quiet|q!'      => \$config{'quiet'},
    'force|f!'      => \$config{'force'},
    'password|p=s'  => \$config{'password'},
    'name|n=s'      => \$config{'name'},
    'source|s=s'    => \$config{'source'},
    'source-db|d=s' => \$config{'source-db'},
    'truncate!'     => \$config{'truncate'},
    '<>'            => sub { my $m = shift; push( @modes, lc($m) ); },

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or die("Unknown Command");

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

$config{'default'}{'dbhost'} ||= 'localhost';
$config{'default'}{'dbuser'} ||= 'vboxadm';
$config{'default'}{'dbpass'} ||= '';
$config{'default'}{'dbport'} ||= 3306;
$config{'default'}{'dbdb'}   ||= 'vboxadm';
$config{'cgi'}{'pwscheme'}   ||= 'sha256';

print "#########################\n" unless $config{'quiet'};
print ">>>>>>> VBoxAdm CLI <<<<<\n" unless $config{'quiet'};
print "#########################\n" unless $config{'quiet'};

=begin commands

Common opts:
-f - force
-q - quiet
-v - verbose

=head1 User

user add [-p <password>] [-n <name>] <email> - Add a new user/mailbox
user update [-p <password>] [-n <name>] [- ...] <email> - Modify mailbox
user delete <email> - Delete mailbox

=head1 Alias

alias add <email> <goto>
alias update <email> <goto>
alias delete <email>

=head1 Domain

domain add <domain>
domain update [...] <domain>
domain delete <domain>

=head1 Domain Alias

domainalias add <domain> <goto>
domainalias update [...] <domain>
domainalias delete <domain>

=head1 Vacation Blacklist

vbl add <email>

=head1 AWL

awl add <email>
awl lock <email>

=head1 Setup

setup - enter interactive setup

=head1 migrate

migrate -s <source-db> -t <source-type>

=cut

#
# Database connection
#
my $dsn =
"DBI:mysql:host=$config{'default'}{'dbhost'};database=$config{'default'}{'dbdb'};port=$config{'default'}{'dbport'};user=$config{'default'}{'dbuser'};password=$config{'default'}{'dbpass'}";
my $dbh = &VBoxAdm::DB::connect( $dsn, { RaiseError => 0, } );

if ( !$dbh ) {
    print "Could not connect to DB!\n";
    exit 1;
}

#
# Authentication
#
# if user != root -> need to login as domainadmin
if ( $EFFECTIVE_USER_ID != 0 ) {
    if ( !&check_login( $dbh, \%config, $opts ) ) {
        print "Not authorized. Aborting.\n";
        exit 1;
    }
}

#
# Localization
#
$opts->{Lh}    = VBoxAdm::L10N->get_handle();
$opts->{Lh_EN} = VBoxAdm::L10N->get_handle('en');

#
# Action Dispatching
#
if ( !@modes ) {
    if ( $config{'quiet'} ) {
        exit 1;
    }
    else {
        &interactive( \%config, $opts );
    }
}
elsif ( $modes[0] eq 'user' ) {
    &handle_user( $dbh, \%config, \@modes, $opts );
}
elsif ( $modes[0] eq 'alias' ) {
    &handle_alias( $dbh, \%config, \@modes, $opts );
}
elsif ( $modes[0] eq 'domain' ) {
    &handle_domain( $dbh, \%config, \@modes, $opts );
}
elsif ( $modes[0] eq 'domainalias' ) {
    &handle_domainalias( $dbh, \%config, \@modes, $opts );
}
elsif ( $modes[0] eq 'vbl' ) {
    &handle_vbl( $dbh, \%config, \@modes, $opts );
}
elsif ( $modes[0] eq 'awl' ) {
    &handle_awl( $dbh, \%config, \@modes, $opts );
}
elsif ( $modes[0] eq 'setup' ) {
    &setup( \%config, $opts );
}
elsif ( $modes[0] eq 'migrate' ) {
    &migrate( $dbh, \%config, \@modes, $opts );
}
$dbh->disconnect();
exit 0;

###########################################################################
# SUBS
###########################################################################

sub handle_user {
    my $dbh    = shift;
    my $config = shift;
    my $modes  = shift;
    my $opts   = shift || {};

    local $opts->{Password}        = $config->{'password'}         || undef;
    local $opts->{Name}            = $config->{'name'}             || undef;
    local $opts->{IsActive}        = $config->{'is_active'}        || undef;
    local $opts->{MaxMsgSize}      = $config->{'max_msg_size'}     || undef;
    local $opts->{IsOnVacation}    = $config->{'is_on_vacation'}   || undef;
    local $opts->{VacationSubject} = $config->{'vacation_subject'} || undef;
    local $opts->{VacationMessage} = $config->{'vacation_message'} || undef;
    local $opts->{VacationStart}   = $config->{'vacation_start'}   || undef;
    local $opts->{VacationEnd}     = $config->{'vacation_end'}     || undef;
    local $opts->{Quota}           = $config->{'quota'}            || undef;
    local $opts->{IsDomainadmin}   = $config->{'is_domainadmin'}   || undef;
    local $opts->{IsSuperadmin}    = $config->{'is_superadmin'}    || undef;
    local $opts->{SAActive}        = $config->{'sa_active'}        || undef;
    local $opts->{SAKillScore}     = $config->{'sa_kill_score'}    || undef;

    if ( $modes->[1] eq 'add' ) {
        &VBoxAdm::API::Mailbox::create( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'update' ) {
        &VBoxAdm::API::Mailbox::update( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'delete' ) {
        &VBoxAdm::API::Mailbox::delete( $dbh, $modes->[2], $opts );
    }
    else {
        print "Unknown mode. Choose one of 'add', 'update', 'delete'.\n";
        exit 1;
    }
}

sub handle_alias {
    my $dbh    = shift;
    my $config = shift;
    my $modes  = shift;
    my $opts   = shift || {};

    local $opts->{Goto}     = $config->{'goto'}      || undef;
    local $opts->{IsActive} = $config->{'is_active'} || undef;

    if ( $modes->[1] eq 'add' ) {
        &VBoxAdm::API::Alias::create( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'update' ) {
        &VBoxAdm::API::Alias::update( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'delete' ) {
        &VBoxAdm::API::Alias::delete( $dbh, $modes->[2], $opts );
    }
    else {
        print "Unknown mode. Choose one of 'add', 'update', 'delete'.\n";
        exit 1;
    }
}

sub handle_domain {
    my $dbh    = shift;
    my $config = shift;
    my $modes  = shift;
    my $opts   = shift || {};

    local $opts->{IsActive} = $config->{'is_active'} || undef;

    if ( $modes->[1] eq 'add' ) {
        my ( $status, $loc, $en ) = &VBoxAdm::API::Domain::create( $dbh, $modes->[2], $opts );
        print $en. "\n";
        return $status;
    }
    elsif ( $modes->[1] eq 'update' ) {
        &VBoxAdm::API::Domain::update( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'delete' ) {
        &VBoxAdm::API::Domain::delete( $dbh, $modes->[2], $opts );
    }
    else {
        print "Unknown mode. Choose one of 'add', 'update', 'delete'.\n";
        exit 1;
    }
}

sub handle_domainalias {
    my $dbh    = shift;
    my $config = shift;
    my $modes  = shift;
    my $opts   = shift || {};

    local $opts->{IsActive} = $config->{'is_active'} || undef;
    local $opts->{Goto}     = $config->{'goto'}      || undef;

    if ( $modes->[1] eq 'add' ) {
        &VBoxAdm::API::DomainAlias::create( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'update' ) {
        &VBoxAdm::API::DomainAlias::update( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'delete' ) {
        &VBoxAdm::API::DomainAlias::delete( $dbh, $modes->[2], $opts );
    }
    else {
        print "Unknown mode. Choose one of 'add', 'update', 'delete'.\n";
        exit 1;
    }
}

sub handle_vbl {
    my $dbh    = shift;
    my $config = shift;
    my $modes  = shift;
    my $opts   = shift || {};

    if ( $modes->[1] eq 'add' ) {
        &VBoxAdm::API::VacationBlacklist::create( $dbh, $modes->[2], $opts );
    }
    else {
        print "Unknown mode. Choose 'add'.\n";
        exit 1;
    }
}

sub handle_awl {
    my $dbh    = shift;
    my $config = shift;
    my $modes  = shift;
    my $opts   = shift || {};

    if ( $modes->[1] eq 'add' ) {
        &VBoxAdm::API::AWL::create( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'lock' ) {
        local $opts->{Disabled} = 1;
        &VBoxAdm::API::AWL::update( $dbh, $modes->[2], $opts );
    }
    elsif ( $modes->[1] eq 'unlock' ) {
        local $opts->{Disabled} = 0;
        &VBoxAdm::API::AWL::update( $dbh, $modes->[2], $opts );
    }
    else {
        print "Unknown mode. Choose one of 'add', 'lock', 'unlock'.\n";
        exit 1;
    }
}

sub migrate {
    my $dbh    = shift;
    my $config = shift;
    my $opts   = shift || {};

    if ( !$config->{'source'} ) {
        print "Need source-type\n";
        return;
    }

    if ( !$config->{'source-db'} ) {
        $config{'source-db'} = $config{'source'};
    }

    if ( &VBoxAdm::Migration::migrate( $dbh, \%config, $config{'source'}, $config{'source-db'}, 'vboxadm' ) ) {
        print "Migration OK\n" unless $config->{'quiet'};
        return 1;
    }
    else {
        print "Migration FAILED\n" unless $config->{'quiet'};
        return;
    }
}

sub interactive {
    my $config = shift;

    my @actions = ();
    push( @actions, "User admin" );                  # 0
    push( @actions, "Alias admin" );                 # 1
    push( @actions, "Domain admin" );                # 2
    push( @actions, "Domain Alias admin" );          # 3
    push( @actions, "Vacation Blacklist admin" );    # 4
    push( @actions, "AWL admin" );                   # 5
    push( @actions, "Setup" );                       # 6
    push( @actions, "Migration" );                   # 7
    my ( $num, $item ) = &ask_select( 'Choose an action:', @actions );

    if ( !defined($num) ) {
        print "User aborted.\n";
        exit 1;
    }

    #print "You chose: $num - $item\n";
    if ( $num == 0 ) {

        # TODO implement
        print "User-Admin Not yet implemented!\n";
    }
    elsif ( $num == 1 ) {

        # TODO implement
        print "Alias-Admin Not yet implemented!\n";
    }
    elsif ( $num == 2 ) {

        # TODO implement
        print "Domain-Admin Not yet implemented!\n";
    }
    elsif ( $num == 3 ) {

        # TODO implement
        print "DomainAlias-Admin Not yet implemented!\n";
    }
    elsif ( $num == 4 ) {

        # TODO implement
        print "VacationBlacklist-Admin Not yet implemented!\n";
    }
    elsif ( $num == 5 ) {

        # TODO implement
        print "AWL-Admin Not yet implemented!\n";
    }
    elsif ( $num == 6 ) {

        # TODO implement
        print "Setup Not yet implemented!\n";
    }
    elsif ( $num == 7 ) {

        # TODO implement
        print "Migration Not yet implemented!\n";
    }
    else {
        print "Unknown option.\n";
    }
    return 1;
}

sub check_login {
    my $dbh    = shift;
    my $config = shift;
    my $conf   = $ENV{'HOME'} . '/.vboxadm.cnf';
    my %user_config;
    if ( -f $conf || $config->{'quiet'} ) {
        print "check_login - Reading config from $conf ...\n" if $config->{'verbose'};
        read_config $conf => %user_config;
    }
    else {
        print "No .vboxadm.cnf found in your home.\n";
        $user_config{'auth'}{'username'} = &ask_string('Please enter the email of an site-admin');
        $user_config{'auth'}{'password'} = &ask_string('Please enter the password');
        if ( &ask_yesno('Should I create a .vboxadm.cnf for you?') ) {
            write_config %user_config => $conf;
        }
    }

    # check if login works
    if ( !&VBoxAdm::Utils::is_valid_address_rfc822( $user_config{'auth'}{'username'} ) ) {
        print "Invalid email address given.\n" unless $config->{'quiet'};
        return;
    }
    my ( $local_part, $domain ) = split /@/, $user_config{'auth'}{'username'};
    my $sql = "SELECT m.password,m.is_superadmin FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.local_part = ? AND d.name = ?";
    my $sth = &VBoxAdm::DB::prepexec( $dbh, $sql, $local_part, $domain );
    my ( $pw, $is_sa ) = $sth->fetchrow_array();
    $sth->finish();
    if ( !$is_sa ) {
        print "You are no siteadmin!\n";
        return;
    }
    if ( !&VBoxAdm::DovecotPW::verify_pass( $user_config{'auth'}{'password'}, $pw ) ) {
        print "Password invalid!\n";
        return;
    }
    print "Authorized as site-admin " . $user_config{'auth'}{'username'} . "\n" unless $config->{'quiet'};
    return 1;
}

sub setup {
    my $config = shift;
    my %do     = ();

    # Ask for options
    if ( !$do{'create-system-accounts'} ) {
        $do{'create-system-accounts'} = &ask_yesno('Create System Accounts?');
    }
    if ( !$do{'create-database'} ) {
        $do{'create-database'} = &ask_yesno('Create Database?');
    }
    if ( !$do{'create-database-grants'} ) {
        $do{'create-database-grants'} = &ask_yesno('Create Database User?');
    }
    if ( !$do{'init-db'} ) {
        $do{'init-db'} = &ask_yesno('Initialize Database?');
    }
    if ( !$do{'create-site-admin'} ) {
        $do{'create-site-admin'} = &ask_yesno('Create site-admin?');
    }
    if ( !$do{'configure-smtpproxy'} ) {
        $do{'configure-smtpproxy'} = &ask_yesno('Configure the SMTP-Proxy?');
    }
    if ( !$do{'enable-smtpproxy'} ) {
        $do{'enable-smtpproxy'} = &ask_yesno('Start SMTP-Proxy at boot?');
    }
    if ( !$do{'create-ssl'} ) {
        $do{'create-ssl'} = &ask_yesno('Create self-signed SSL cert?');
    }
    if ( !$do{'init-postfix-config'} ) {
        $do{'init-postfix-config'} = &ask_yesno('Initialize Postfix Config files?');
    }
    if ( !$do{'configure-postfix'} ) {
        $do{'configure-postfix'} = &ask_yesno('Configure Postfix?');
    }
    if ( !$do{'configure-dovecot'} ) {
        $do{'configure-dovecot'} = &ask_yesno('Configure Dovecot?');
    }
    if ( !$do{'migrate'} ) {
        $do{'migrate'} = &ask_yesno('Migrate existing users?');
    }

    ###
    # BASIC
    ###
    my $user_ref;

    # create system user and groups (if necessary)
    if ( $do{'create-system-accounts'} ) {
        &create_system_accounts( \%config, $user_ref );
    }

    # Create Database
    # --db-root-user, --db-root-pass, --db-user, --db-pass, --db-name
    # - CREATE DATABASE
    # - GRANT
    # - initialize
    my $dbh;
    my %dbi_root;
    my $vboxadm_db;
    my $roundcube_db;

    if ( $do{'create-database'} || $do{'create-database-grants'} ) {
        print "### MySQL Root Password required ###\n";
        print "You've asked for database operations that require root privileges.\n";
        print "Please enter the Username of an administrative database user or press enter to abort:\n";
        $dbi_root{'user'} = &ask_string("Username");
        if ( !$dbi_root{'user'} ) {
            print "User aborted.\n";
            exit 1;
        }
        $dbi_root{'pass'} = &ask_string("Password");
        $config{'dbhost'} = &ask_string('Host');
        $config{'dbport'} = &ask_number('Port');
    }
    else {
        print "### MySQL User Credentials required ###\n";
        print "Since you've opted not to have the required users create you'll have to\n";
        print "create the users yourself and provide the crentials here.\n";
        $vboxadm_db   = &ask_string('VBoxAdm-Database');
        $roundcube_db = &ask_string('Roundcube-Database');
        foreach my $user (qw(vboxadm vboxadm_user dovecot postfix)) {
            print ">>> User: $user <<<\n";
            $user_ref->{'db'}{$user}{'username'} = &ask_string('Username');
            $user_ref->{'db'}{$user}{'password'} = &ask_string('Password');
        }
        $config{'dbhost'} = &ask_string('Host');
        $config{'dbport'} = &ask_number('Port');
    }

    # Do we have root access to create DB and grants?
    if ( $dbi_root{'user'} && ( $do{'create-database'} || $do{'create-database-grants'} ) ) {
        my ( $dbuser, $dbpass, $dbhost, $dbport, $dbdb );
        $dbhost = $config{'dbhost'};
        $dbport = $config{'dbport'};
        $dbuser = $dbi_root{'user'};
        $dbpass = $dbi_root{'pass'};
        $dbdb   = 'mysql';
        my $dsn = "DBI:mysql:host=$dbhost;database=$dbdb;port=$dbport;user=$dbuser;password=$dbpass";
        my $dbh_root = DBI->connect( $dsn, undef, undef, { RaiseError => 0, } );

        if ( !$dbh_root ) {
            print STDERR "Could not connect to database as root ($dsn). Aborting.\n";
            return;
        }
        if ( $do{'create-database'} ) {
            $vboxadm_db   = &create_database( \%config, $dbh_root, 'vboxadm' );
            $roundcube_db = &create_database( \%config, $dbh_root, 'roundcube' );
        }
        if ( $do{'create-database-grants'} && $vboxadm_db && $roundcube_db ) {
            &create_database_grants( \%config, $dbh_root, $vboxadm_db, $roundcube_db, $user_ref );
        }
        $dbh_root->disconnect();
    }
    else {
        print "Could not do root stuff on DB!\n";
    }

    $config{'dbuser'} = $user_ref->{'db'}{'vboxadm'}{'username'};
    $config{'dbpass'} = $user_ref->{'db'}{'vboxadm'}{'password'};
    $config{'dbdb'}   = $vboxadm_db;

    # Connect to DB
    my $dsn = "DBI:mysql:host=$config{'dbhost'};database=$config{'dbdb'};port=$config{'dbport'};user=$config{'dbuser'};password=$config{'dbpass'}";
    $dbh = DBI->connect( $dsn, undef, undef, { RaiseError => 0, } );
    if ( !$dbh ) {
        print STDERR "Could not connect to database as vboxadm user ($dsn). Aborting.\n";
        return;
    }

    if ( $do{'init-db'} ) {
        &initialize_database( \%config );
    }

    # Select pwscheme
    # --pwscheme
    print "### Password Scheme for User-Passwords ###\n";
    $config{'cgi'}{'pwscheme'} = &ask_select( 'Select the desired password scheme', qw(plain_md5 ldap_md5 smd5 sha ssha sha256 ssha256) );

    # Create Site-Admin
    # --create-site-admin
    if ( $do{'create-site-admin'} ) {
        print "### Create a Site-Admin ###\n";
        &create_siteadmin( $dbh, \%config, $user_ref );
    }

    # Configure SMTP-Proxy
    # --configure-smtpproxy
    if ( $do{'configure-smtpproxy'} ) {
        &configure_smtpproxy( \%config );
    }

    # Enable SMTP-Proxy
    # --enable-smtpproxy
    if ( $do{'enable-smtpproxy'} ) {
        &enable_smtpproxy( \%config );
    }

    ###
    # ADVANCED
    ###
    # Create self-signed ssl cert
    # --create-ssl
    if ( $do{'create-ssl'} ) {
        &create_ssl( \%config );
    }

    # Create Postfix Maps
    # --create-postfix-maps
    if ( $do{'init-postfix-config'} ) {
        &init_postfix_config( \%config, $user_ref );
    }

    # Configure Postfix
    # --configure-postfix
    if ( $do{'configure-postfix'} ) {
        &configure_postfix( \%config, $user_ref );
    }

    # Configure Dovecot
    # --configure-dovecot
    if ( $do{'configure-dovecot'} ) {
        &configure_dovecot( \%config, $user_ref );
    }

    # Mirgrate existing installation
    # --migrate-vexim
    # --migrate-debmin
    # --migrate-postfixadmin
    if ( $do{'migrate'} ) {
        my $source_type = &ask_select( 'What kind of database schema do you want to migrate?', qw(debmin2 vexim postfixadmin) );
        my $source_db = &ask_string('Which Database is the source ');
        if ( $source_type && $source_db ) {
            &VBoxAdm::Migration::migrate( $dbh, $source_type, $source_db, $config{'default'}{'dbdb'} );
        }
    }

    ###
    # TESTS
    ###
    # Check DNS setting
    # - hostname + domain -> one of this hosts ips
    # - reverse of this ip -> hostname + domain
    # Use siteadmin login
    # Test SMTP (+Auth)
    &test_smtp( \%config, $user_ref );

    # Test POP3
    &test_pop3( \%config, $user_ref );

    # Test IMAP
    &test_imap( \%config, $user_ref );

    ###
    # SAVE CONFIG
    ###
    # set all credentials to config file
    # write configuration
    # write_config %config, $other_file_name;
    $config{'default'}{'setup_done'} = 1;
    my $config_filename = $conffile_used || '/etc/vboxadm/vboxadm.conf';
    write_config %config, $config_filename;

    ###
    # DONE
    ###
    $dbh->disconnect();
    return 1;
}
####
# SUBS
####
sub test_smtp {
    my $config   = shift;
    my $user_ref = shift;
    {
        my $ip   = '127.0.0.1';
        my $port = 25;
        my ( $status, $msg ) = &check_smtp( $ip, $port, $user_ref->{'siteadmin'}{'username'}, $user_ref->{'siteadmin'}{'password'}, 30 );
        if ($status) {
            print "TEST-SMTP: Connection to $ip:$port OK\n";
        }
        else {
            print "TEST-SMTP: Connection to $ip:$port FAILED: $msg\n";
        }
    }
    {
        my $ip   = '127.0.0.1';
        my $port = 587;
        my ( $status, $msg ) = &check_smtp( $ip, $port, $user_ref->{'siteadmin'}{'username'}, $user_ref->{'siteadmin'}{'password'}, 30 );
        if ($status) {
            print "TEST-SMTP: Connection to $ip:$port OK\n";
        }
        else {
            print "TEST-SMTP: Connection to $ip:$port FAILED: $msg\n";
        }
    }
}

sub test_pop3 {
    my $config   = shift;
    my $user_ref = shift;

    {
        my $ip   = '127.0.0.1';
        my $port = 110;
        my ( $status, $msg ) = &check_pop3( $ip, $port, $user_ref->{'siteadmin'}{'username'}, $user_ref->{'siteadmin'}{'password'}, 30 );
        if ($status) {
            print "TEST-POP3: Connection to $ip:$port OK\n";
        }
        else {
            print "TEST-POP3: Connection to $ip:$port FAILED: $msg\n";
        }
    }
}

sub test_imap {
    my $config   = shift;
    my $user_ref = shift;
    {
        my $ip   = '127.0.0.1';
        my $port = 143;
        my ( $status, $msg ) = &check_imap( $ip, $port, $user_ref->{'siteadmin'}{'username'}, $user_ref->{'siteadmin'}{'password'}, 30, 0 );
        if ($status) {
            print "TEST-IMAP: Connection to $ip:$port OK\n";
        }
        else {
            print "TEST-IMAP: Connection to $ip:$port FAILED: $msg\n";
        }
    }
    {
        my $ip   = '127.0.0.1';
        my $port = 993;
        my ( $status, $msg ) = &check_imap( $ip, $port, $user_ref->{'siteadmin'}{'username'}, $user_ref->{'siteadmin'}{'password'}, 30, 1 );
        if ($status) {
            print "TEST-IMAP: Connection to $ip:$port OK\n";
        }
        else {
            print "TEST-IMAP: Connection to $ip:$port FAILED: $msg\n";
        }
    }
}

sub configure_smtpproxy {
    my $config = shift;
    my %saopts = ();
    $saopts{'caching'}{'default'}               = 1;
    $saopts{'caching'}{'description'}           = 'Enable caching of SpamAssassin results';
    $saopts{'max_msg_size'}{'default'}          = 25;
    $saopts{'max_msg_size'}{'description'}      = 'Global maximum message size in MB';
    $saopts{'childtimeout'}{'default'}          = 60;
    $saopts{'childtimeout'}{'description'}      = 'Timeout for scanning a message';
    $saopts{'sa_max_msg_size'}{'default'}       = 10;
    $saopts{'sa_max_msg_size'}{'description'}   = 'Maximum message size for scanning with SpamAssassin';
    $saopts{'sa_timeout'}{'default'}            = 30;
    $saopts{'sa_timeout'}{'description'}        = 'Timeout for scanning a message for Spam';
    $saopts{'min_servers'}{'default'}           = 20;
    $saopts{'min_servers'}{'description'}       = 'Minimal number of forks of the SMTP-Proxy running';
    $saopts{'max_servers'}{'default'}           = 80;
    $saopts{'max_servers'}{'description'}       = 'Maximum number of forks of the SMTP-Proxy running';
    $saopts{'min_spare_servers'}{'default'}     = 10;
    $saopts{'min_spare_servers'}{'description'} = 'Minimal number of idle forks running';
    $saopts{'max_spare_servers'}{'default'}     = 20;
    $saopts{'max_spare_servers'}{'description'} = 'Maximum number of idle forks running';
    $saopts{'max_requests'}{'default'}          = 30;
    $saopts{'max_requests'}{'description'}      = 'Messages processed per child';

    foreach my $opt ( keys %saopts ) {
        $config->{$opt} = &ask_number( $saopts{$opt}{'description'} . '[' . $saopts{$opt}{'default'} . ']' ) || $saopts{$opt}{'default'};
    }
    return 1;
}

sub enable_smtpproxy {
    my $sa_default_file = '/etc/default/vboxadm-sa';
    if ( -f $sa_default_file ) {

        # edit it
        my $content = VBoxAdm::Utils::slurp($sa_default_file);
        $content =~ s/^START_SMTPPROXY=.*$/START_SMTPPROXY="true"/;
        VBoxAdm::Utils::blarf( $sa_default_file, $content );
    }
}

sub create_ssl {
    my $user_ref = shift;
    my $hostname = Net::Domain::hostname();
    my $domain   = Net::Domain::hostdomain();
    my $year     = ( localtime(time) )[5];
    $year += 1900;
    my $csrpath         = '/root/' . $hostname . '.' . $domain . '.csr';
    my $ssl_key_file    = '/etc/ssl/private/' . $hostname . '.' . $domain . '-' . $year . '.key';
    my $ssl_cert_file   = '/etc/ssl/certs/' . $hostname . '.' . $domain . '-' . $year . '.crt';
    my $lighty_pem_file = '/etc/lighttpd/' . $hostname . '.' . $domain . '-' . $year . '.pem';

    # create tempdir for certs and keys
    my $tempdir = File::Temp::tempdir( CLEANUP => 1 );
    my ( $cmd, $rv );
    $cmd = 'openssl genrsa -out ' . $tempdir . '/private.key 2048';
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "create_ssl - Command ($cmd) failed: $!\n";
        return;
    }
    $cmd = 'openssl req -new -key ' . $tempdir . '/private.key -out ' . $tempdir . '/' . $hostname . '.' . $domain . '.csr';
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "create_ssl - Command ($cmd) failed: $!\n";
        return;
    }

    # Create CSR or self sign?
    my $selfsign = &ask_yesno('Do you want to create a self-signed certificate?');
    if ($selfsign) {

        # self-sign:
        $cmd =
            'openssl x509 -req -days 365 -in ' 
          . $tempdir . '/'
          . $hostname . '.'
          . $domain
          . '.csr -signkey '
          . $tempdir
          . '/private.key -out '
          . $tempdir . '/'
          . $hostname . '.'
          . $domain . '.crt';
        $rv = system($cmd) >> 8;
        if ( $rv != 0 ) {
            print "create_ssl - Command ($cmd) failed: $!\n";
            return;
        }
    }
    else {

        # csr: noop
        print "Find your CSR at $csrpath\n";

        # hostname.domain.tld.csr to /root/
        $cmd = "mv $tempdir/$hostname.$domain.csr $csrpath";
        $rv  = system($cmd) >> 8;
        if ( $rv != 0 ) {
            print "create_ssl - Command ($cmd) failed: $!\n";
            return;
        }
    }

    # move files:

    # private.key to /etc/ssl/private/hostname.domain.tld-YYYY.key
    $cmd = "mv $tempdir/private.key " . $ssl_key_file;
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "create_ssl - Command ($cmd) failed: $!\n";
        return;
    }

    # hostname.domain.tld.crt to /etc/ssl/certs/hostname.domain.tld-YYYY.crt
    $cmd = "mv $tempdir/$hostname.$domain.crt " . $ssl_cert_file;
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "create_ssl - Command ($cmd) failed: $!\n";
        return;
    }

    # hostname.domain.tld.crt + hostname.domain.tld.key > /etc/lighttpd/hostname.domain.tld-YYYY.pem
    $cmd = "cp $ssl_key_file $lighty_pem_file";
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "create_ssl - Command ($cmd) failed: $!\n";
        return;
    }
    $cmd = "cat $ssl_cert_file >> $lighty_pem_file";
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "create_ssl - Command ($cmd) failed: $!\n";
        return;
    }

    $user_ref->{'ssl'}{'key'}  = $ssl_key_file;
    $user_ref->{'ssl'}{'cert'} = $ssl_cert_file;
    $user_ref->{'ssl'}{'pem'}  = $lighty_pem_file;
    return 1;
}

sub find_conf_source {
    my $user_ref = shift;

    if ( !$user_ref->{'conf_source'} ) {

        # find maps - try doc/postfix/maps, /usr/share/doc/vboxadm-common/examples/postfix/maps/
        my @conf_sources = qw(doc/postfix /usr/share/doc/vboxadm-common/examples/postfix);
        foreach my $dir (@conf_sources) {
            if ( -d $dir && -f $dir . '/main.cf' && -d $dir . '/maps/' ) {
                $dir =~ s#/postfix/?$##;
                $user_ref->{'conf_source'} = $dir;
            }
        }
    }
}

sub init_postfix_config {
    my $config   = shift;
    my $user_ref = shift;

    my ( $cmd, $rv );
    my $mapdir = '/etc/postfix/maps';

    &find_conf_source($user_ref);
    my $conf_source = $user_ref->{'conf_source'} . '/postfix';
    if ( !$conf_source || !-d $conf_source ) {
        print "init_postfix_maps - Failed to find configuration file source!\n";
        return;
    }

    $cmd = "mv -f /etc/postfix/main.cf /etc/postfix/main.cf.dist";
    print "CMD: $cmd\n";
    $rv = system($cmd) >> 8;
    if ( $rv == 0 ) {
        print "OK\n";
    }
    else {
        print "ERROR: $!\n";
    }

    $cmd = "mv -f /etc/postfix/master.cf /etc/postfix/master.cf.dist";
    print "CMD: $cmd - ";
    $rv = system($cmd) >> 8;
    if ( $rv == 0 ) {
        print "OK\n";
    }
    else {
        print "ERROR: $!\n";
    }

    if ( -d '/etc/postfix/maps' ) {
        $cmd = "mv /etc/postfix/maps /etc/postfix/maps.dist";
        print "CMD: $cmd\n";
        $rv = system($cmd) >> 8;
        if ( $rv == 0 ) {
            print "OK\n";
        }
        else {
            print "ERROR: $!\n";
        }
    }

    # makedir /etc/postfix/maps
    $cmd = "mkdir -p $mapdir";
    print "CMD: $cmd\n";
    $rv = system($cmd) >> 8;
    if ( $rv != 0 ) {
        print "init_postfix_maps - Failed to create $mapdir: $!\n";
        return;
    }

    # copy maps to /etc/postfix/maps
    $cmd = "cp $conf_source/maps/* /etc/postfix/maps/";
    print "CMD: $cmd - ";
    $rv = system($cmd) >> 8;
    if ( $rv == 0 ) {
        print "OK\n";
    }
    else {
        print "ERROR: $!\n";
    }

    $cmd = "cp $conf_source/main.cf /etc/postfix/main.cf";
    print "CMD: $cmd - ";
    $rv = system($cmd) >> 8;
    if ( $rv == 0 ) {
        print "OK\n";
    }
    else {
        print "ERROR: $!\n";
    }

    $cmd = "cp $conf_source/master.cf /etc/postfix/master.cf";
    print "CMD: $cmd - ";
    $rv = system($cmd) >> 8;
    if ( $rv == 0 ) {
        print "OK\n";
    }
    else {
        print "ERROR: $!\n";
    }

    # replace username, password and db
    if ( opendir( my $DH, $mapdir ) ) {
        while ( my $dir_entry = readdir($DH) ) {
            next if $dir_entry =~ m/^\./;
            next unless $dir_entry =~ m/^virtual_/;
            my $file = $mapdir . '/' . $dir_entry;

            # edit file
            if ( open( my $OLD, "<", $file ) ) {
                if ( open( my $NEW, ">", $file . '.new' ) ) {
                    while ( my $line = <$OLD> ) {
                        $line =~ s/^user = postfix\b/user = $user_ref->{'postfix'}{'username'}/;
                        $line =~ s/^password = PASSWORD\b/password = $user_ref->{'postfix'}{'password'}/;
                        $line =~ s/^dbname = vboxadm\b/dbname = $config{'dbdb'}/;
                        print $NEW $line;
                    }
                    close($NEW);
                    close($OLD);
                    unlink($file);
                    rename( $file . '.new', $file );
                }
            }
        }
        closedir($DH);
    }
}

sub configure_postfix {
    my $config   = shift;
    my $user_ref = shift;

    my $hostname = Net::Domain::hostname();
    my $domain   = Net::Domain::hostdomain();

    my ( $cmd, $rv );

    # get mynetworks
    my @mynets = ();
    my @ips    = `/bin/ip addr`;
    foreach my $line (@ips) {

        # inet 192.168.23.11/24
        if ( $line =~ m/\s*inet\s+(\d+\.\d+\.\d+\.\d+)\/(\d+)/ ) {
            push( @mynets, "$1/$2" );
        }
    }

    my %postopts = (
        'myhostname'          => "$hostname.$domain",
        'mynetworks'          => "[::1]/128 " . join( " ", @mynets ),
        'virtual_minimum_uid' => $user_ref->{'system'}{'min_uid'},
        'virtual_uid_maps'    => "static:" . $user_ref->{'system'}{'vmail'}{'uid'},
        'virtual_gid_maps'    => "static:" . $user_ref->{'system'}{'vmail'}{'gid'},
        'mydestination'       => "$hostname.$domain, localhost",
        'relayhosts'          => '',
        'inet_protocols'      => 'all',
        'smtpd_tls_cert_file' => $user_ref->{'ssl'}{'cert'},
        'smtpd_tls_key_file'  => $user_ref->{'ssl'}{'key'},
    );

    foreach my $key ( keys %postopts ) {
        $cmd = "postconf -e $key=\"" . $postopts{$key} . "\"";
        print "CMD: $cmd - ";
        $rv = system($cmd) >> 8;
        if ( $rv == 0 ) {
            print "OK\n";
        }
        else {
            print "ERROR\n";
        }
    }

    return 1;
}

sub configure_dovecot {
    my $config   = shift;
    my $user_ref = shift;

    &find_conf_source($user_ref);
    my $conf_source = $user_ref->{'conf_source'} . '/dovecot';
    if ( !$conf_source || !-d $conf_source ) {
        print "configure_dovecot - Failed to find configuration file source!\n";
        return;
    }

    my %dovopts = ();
    $dovopts{'ssl_cert_file'}   = $user_ref->{'ssl'}{'cert'};
    $dovopts{'ssl_key_file'}    = $user_ref->{'ssl'}{'key'};
    $dovopts{'first_valid_uid'} = $user_ref->{'system'}{'min_uid'};
    $dovopts{'first_valid_gid'} = $user_ref->{'system'}{'min_gid'};
    $dovopts{'domain'}          = '';
    $dovopts{'vmail_uid'}       = $user_ref->{'system'}{'vmail'}{'uid'};
    $dovopts{'vmail_gid'}       = $user_ref->{'system'}{'vmail'}{'gid'};
    $dovopts{'vboxadm_uid'}     = $user_ref->{'system'}{'vboxadm'}{'uid'};
    $dovopts{'vboxadm_gid'}     = $user_ref->{'system'}{'vboxadm'}{'gid'};
    $dovopts{'dbhost'}          = $config->{'dbhost'};
    $dovopts{'dbname'}          = $config->{'dbdb'};
    $dovopts{'dbuser'}          = $user_ref->{'db'}{'dovecot'}{'username'};
    $dovopts{'dbpass'}          = $user_ref->{'db'}{'dovecot'}{'password'};

    my $dovecot_conf_file     = $conf_source . '/dovecot.conf';
    my $dovecot_sql_conf_file = $conf_source . '/dovecot-sql.conf';
    my $dovecot_conf          = VBoxAdm::Utils::slurp($dovecot_conf_file);
    my $dovecot_sql_conf      = VBoxAdm::Utils::slurp($dovecot_sql_conf_file);
    foreach my $key ( keys %dovopts ) {
        $dovecot_conf     =~ s/{{$key}}/$dovopts{$key}/g;
        $dovecot_sql_conf =~ s/{{$key}}/$dovopts{$key}/g;
    }
    VBoxAdm::Utils::blarf( '/etc/dovecot/dovecot.conf',     $dovecot_conf );
    VBoxAdm::Utils::blarf( '/etc/dovecot/dovecot-sql.conf', $dovecot_sql_conf );
}

sub initialize_database {
    my $config = shift;

    # find path to schema.sql!
    my @schema_locations = qw(
      schema.sql
      doc/mysql/schema.sql
      /usr/share/doc/vboxadm-common/examples/mysql/schema.sql
    );
    my $schemafile = undef;
    foreach my $loc (@schema_locations) {
        if ( -r $loc ) {
            $schemafile = $loc;
        }
    }

    if ( !$schemafile ) {
        print STDERR "MySQL Schema file not found!\n";
        return;
    }

    my $cmd = "/usr/bin/mysql -f -u$config->{'dbuser'} -p$config->{'dbpass'} -h$config->{'dbhost'} --port=$config->{'dbport'} $config->{'dbdb'} < $schemafile";

    my $rv = system($cmd) >> 8;

    if ( $rv == 0 ) {
        return 1;
    }
    return;
}

sub create_system_accounts {
    my $config   = shift;
    my $user_ref = shift;

    $user_ref->{'system'}{'min_uid'} = 65534;
    $user_ref->{'system'}{'min_gid'} = 65534;

    my ( $cmd, $rv, $uid, $gid );

    # create vboxadm user for sa and vacation
    # make sure that the user exists. the simplest portable way to check that
    # is to chown something.
    $cmd = "makedir /tmp/vboxadm root:root 700";
    $rv  = system($cmd) >> 8;
    $cmd = "chgrp vboxadm /tmp/vboxadm 2>/dev/null";
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        $cmd = "addgroup --system vboxadm";
        $rv  = system($cmd) >> 8;
    }
    $cmd = "chown vboxadm /tmp/vboxadm 2>/dev/null";
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        $cmd = "adduser --system --home /var/lib/vboxadm --no-create-home --ingroup vboxadm --disabled-password vboxadm";
        $rv  = system($cmd) >> 8;
    }
    $user_ref->{'system'}{'vboxadm'}{'uid'} = getpwnam('vboxadm');
    $user_ref->{'system'}{'min_uid'} =
        $user_ref->{'system'}{'vboxadm'}{'uid'} > $user_ref->{'system'}{'min_uid'}
      ? $user_ref->{'system'}{'min_uid'}
      : $user_ref->{'system'}{'vboxadm'}{'uid'};
    $user_ref->{'system'}{'vboxadm'}{'gid'} = getgrnam('vboxadm');
    $user_ref->{'system'}{'min_gid'} =
        $user_ref->{'system'}{'vboxadm'}{'gid'} > $user_ref->{'system'}{'min_gid'}
      ? $user_ref->{'system'}{'min_gid'}
      : $user_ref->{'system'}{'vboxadm'}{'gid'};

    # create vmail user for mails
    $cmd = "makedir /tmp/vmail root:root 700";
    $rv  = system($cmd) >> 8;
    $cmd = "chgrp vmail /tmp/vmail 2>/dev/null";
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        $cmd = "addgroup --system vmail";
        $rv  = system($cmd) >> 8;
    }
    $cmd = "chown vmail /tmp/vmail 2>/dev/null";
    $rv  = system($cmd) >> 8;
    if ( $rv != 0 ) {
        $cmd = "adduser --system --home /var/vmail --no-create-home --ingroup vmail --disabled-password vmail";
        $rv  = system($cmd) >> 8;
    }
    $user_ref->{'system'}{'vmail'}{'uid'} = getpwnam('vmail');
    $user_ref->{'system'}{'min_uid'} =
      $user_ref->{'system'}{'vmail'}{'uid'} > $user_ref->{'system'}{'min_uid'} ? $user_ref->{'system'}{'min_uid'} : $user_ref->{'system'}{'vmail'}{'uid'};
    $user_ref->{'system'}{'vmail'}{'gid'} = getgrnam('vmail');
    $user_ref->{'system'}{'min_gid'} =
      $user_ref->{'system'}{'vmail'}{'gid'} > $user_ref->{'system'}{'min_gid'} ? $user_ref->{'system'}{'min_gid'} : $user_ref->{'system'}{'vmail'}{'gid'};

    # set $user_ref->{'system'}{'min_uid'} and min_gid
    return 1;
}

sub create_database {
    my $config   = shift;
    my $dbh      = shift;
    my $database = shift;

    my $sql = "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ?";
    print "create_database - Query: $sql\n" if $config->{'verbose'};
    my $sth = $dbh->prepare($sql);
    $sth->execute($database);
    my $num = $sth->fetchrow_array();
    my $i   = 0;

    # find a free db name
    while ( $num > 0 ) {
        $i++;
        $sth->execute( $database . $i );
        $num = $sth->fetchrow_array();
    }
    $database .= $i if $i;

    $sql = "CREATE DATABASE \`$database\`";
    $dbh->do($sql);

    return $database;
}

sub create_database_grants {
    my $config      = shift;
    my $dbh         = shift;
    my $database    = shift;
    my $rc_database = shift;
    my $user_ref    = shift || {};

    # User: vboxadm@localhost
    my $password = Crypt::GeneratePassword::word( 8, 12 );
    my $sql = "GRANT ALL ON \`$database\`.* TO 'vboxadm'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $user_ref->{'db'}{'vboxadm'}{'username'} = 'vboxadm';
    $user_ref->{'db'}{'vboxadm'}{'password'} = $password;

    # User: postfix@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT SELECT ON \`$database\`.* TO 'postfix'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $user_ref->{'db'}{'postfix'}{'username'} = 'postfix';
    $user_ref->{'db'}{'postfix'}{'password'} = $password;

    # User: dovecot@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT ALL ON \`$database\`.mailboxes TO 'dovecot'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $sql = "GRANT ALL ON \`$database\`.domains TO 'dovecot'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $user_ref->{'db'}{'dovecot'}{'username'} = 'dovecot';
    $user_ref->{'db'}{'dovecot'}{'password'} = $password;

    # User: roundcube@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT ALL ON \`$rc_database\`.* TO 'roundcube'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $user_ref->{'db'}{'roundcube'}{'username'} = 'roundcube';
    $user_ref->{'db'}{'roundcube'}{'password'} = $password;

    # User: vboxadm_user@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT SELECT,UPDATE ON \`$database\`.mailboxes TO 'vboxadm_user'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $sql = "GRANT SELECT ON \`$database\`.domains TO 'vboxadm_user'\@'localhost' IDENTIFIED BY '$password'";
    print "create_database_grants - Query: $sql\n" if $config->{'verbose'};
    $dbh->do($sql);
    $user_ref->{'db'}{'vboxadm_user'}{'username'} = 'vboxadm_user';
    $user_ref->{'db'}{'vboxadm_user'}{'password'} = $password;

    # Flush privileges
    $sql = "FLUSH PRIVILEGES";
    $dbh->do($sql);

    return $user_ref;
}

sub create_siteadmin {
    my $dbh      = shift;
    my $config   = shift;
    my $user_ref = shift;
    my $email    = shift;

    if ( !$email ) {
        print "Please enter the username (as user\@domain.tld) for the designated site-admin:\n";
        $email = <STDIN>;
        chomp($email);
        $email = &VBoxAdm::Utils::trim($email);
    }
    if ( !&VBoxAdm::Utils::is_valid_address_rfc822($email) ) {
        die("Invalid Email-Address given: $email\n");
    }
    my ( $local_part, $domain ) = split( /@/, $email );

    # Create Domain
    my $sql = "INSERT IGNORE INTO domains (name,is_active) VALUES(?,1)";
    my $sth = $dbh->prepare($sql);
    $sth->execute($domain);
    $sth->finish();

    $sql = "SELECT id FROM domains WHERE name = ?";
    $sth = $dbh->prepare($sql);
    $sth->execute($domain);
    my $domain_id = $sth->fetchrow_array();
    $sth->finish();

    my $password = Crypt::GeneratePassword::word( 8, 12 );
    my $salt     = Crypt::GeneratePassword::word( 4, 6 );

    $sql = "INSERT INTO mailboxes (domain_id,local_part,password,is_active,is_superadmin) VALUES(?,?,?,1,1) ON DUPLICATE KEY UPDATE password = ?";
    $sth = $dbh->prepare($sql);
    my $pwhash = &VBoxAdm::DovecotPW::make_pass( $password, $config->{'cgi'}{'pwscheme'}, $salt );
    $sth->execute( $domain_id, $local_part, $pwhash, $pwhash );
    $sth->finish();

    print "User $email created. Your password is '$password'.\n";

    $user_ref->{'siteadmin'}{'username'} = $email;
    $user_ref->{'siteadmin'}{'password'} = $password;

    if ( &VBoxAdm::DovecotPW::verify_pass( $password, $pwhash ) ) {
        print "Password verified.\n";
    }
    else {
        print "Password verification failed.\n";
    }
}

sub ask_select {
    my $msg     = shift;
    my @options = @_;

    # let user select on of the options provided
    while (1) {
        print $msg. "\n";
        my $i = 0;
        foreach my $opt (@options) {
            print "[$i] $opt\n";
            $i++;
        }
        my $num = &ask_number( 'Print enter any number between 0 and ' . $i . '. Press enter to abort' );
        if ( defined($num) && $options[$num] ) {
            return wantarray ? ( $num, $options[$num] ) : $options[$num];
        }
        else {
            return;
        }
    }
}

sub ask_yesno {
    my $msg = shift;
    print $msg. " [y/N]: ";
    my $resp = <STDIN>;
    chomp($resp);
    if ( $resp =~ m/(1|Yes|Ja|Y)/i ) {
        return 1;
    }
    return;
}

sub ask_number {
    my $msg = shift;
    print $msg. ": ";
    my $resp = <STDIN>;
    chomp($resp);
    if ( $resp =~ m/^\s*(\d+)\s*$/ ) {
        return $1;
    }
    return;
}

sub ask_string {
    my $msg = shift;
    print $msg. ": ";
    my $resp = <STDIN>;
    chomp($resp);
    return $resp;
}

sub check_pop3 {
    my $ip      = shift;
    my $port    = shift || 110;
    my $user    = shift;
    my $pass    = shift;
    my $timeout = shift;

    my $status = 0;
    my $msg    = '';
    my $pop    = undef;
    if ( $pop = Net::POP3->new( $ip, Timeout => $timeout, Port => $port, ) ) {
        if ( $user && $pass ) {
            if ( $pop->login( $user, $pass ) ) {
                my $msg = $pop->list;
                $msg .= "Connected to $ip. Got " . scalar( keys %$msg ) . " messages.";
                $status = 1;
                $pop->quit();
            }
            else {
                $status = 0;
                $msg .= "Connected to $ip but could not login.";
            }
        }
        else {
            $status = 1;
            $msg .= "Connected to $ip but no credentials given.";
        }
    }
    else {
        $status = 0;
        $msg .= "Can not connect to $ip.";
    }
    return ( $status, $msg );
}

sub check_imap {
    my $ip      = shift;
    my $port    = shift || 143;
    my $user    = shift;
    my $pass    = shift;
    my $timeout = shift || 30;
    my $ssl     = shift || 0;

    my $status = 0;
    my $msg    = '';
    my $imap   = undef;
    if (
        $imap = Net::IMAP::Client->new(
            server => $ip,
            user   => $user,
            pass   => $pass,
            ssl    => $ssl,
            port   => $port,
        )
      )
    {

        if ( $imap->login ) {
            my @folders = $imap->folders;
            my $istatus = $imap->status(@folders);
            $msg .= "Login ok. Number of messages: " . $$istatus{MESSAGES} . "\n";
            $status = 1;
            eval { $imap->logout; };
        }
        else {
            $status = 0;
            $msg .= "Connected to $ip but can not login as $user";
        }
    }
    else {
        $status = 0;
        $msg .= "Can not connect to $ip: " . $imap->last_error;
    }
    return ( $status, $msg );
}

sub check_smtp {
    my $ip      = shift;
    my $port    = shift || 25;
    my $user    = shift;
    my $pass    = shift;
    my $timeout = shift;

    my $status = 0;
    my $msg    = '';
    my $fail   = 0;
    my $smtp   = Net::SMTP->new( $ip, Timeout => $timeout, Port => $port, )
      || ( $fail = 1 );
    if ($fail) {
        $status = 0;
        $msg    = "Can not connect to SMTP Server $ip";
    }
    else {
        if ( $smtp->domain() ) {
            if ( $user && $pass ) {
                $smtp->auth( $user, $pass );
                my $code = $smtp->code();

                #print "SMTP-Code: " . $smtp->code() . "\n" if $verbose;
                if ( $code < 400 ) {
                    $status = 1;
                    $msg .= "SMTP Server $ip is ok. Login successfull.";
                }
                else {
                    $status = 0;
                    $msg .= "SMTP Server $ip is up but login failed.";
                }
            }
            else {
                $status = 1;
                $msg .= "SMTP Server $ip is ok: " . $smtp->domain();
            }
        }
        else {
            $status = 0;
            $msg .= "SMTP Server $ip is not ok.";
        }
    }
    return ( $status, $msg );
}
__END__
