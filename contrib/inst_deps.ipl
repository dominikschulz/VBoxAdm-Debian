#!/usr/bin/perl
use strict;
use warnings;
use 5.9.0;

use English qw(-no_match_vars);

use CPAN;

use Term::ANSIColor qw(:constants);
$Term::ANSIColor::AUTORESET = 1;

# module syntax: Module::Name/MinVersion/Required/DEB/RPM
my @modules = qw(
  Carp/1.11/1/perl-base/perl
  CGI::Application/4.31/1/libcgi-application-perl/perl-CGI-Application
  CGI::Application::Plugin::Authentication/0.12/1/libcgi-application-extra-plugin-bundle-perl/perl-CGI-Application-Plugin-Authentication
  CGI::Application::Plugin::DBH/4.00/1/libcgi-application-basic-plugin-bundle-perl/perl-CGI-Application-Plugin-DBH
  CGI::Application::Plugin::Redirect/1.00/1/libcgi-application-basic-plugin-bundle-perl/perl-CGI-Application-Plugin-Redirect
  CGI::Application::Plugin::RequireSSL/0/1/libcgi-application-extra-plugin-bundle-perl/perl-CGI-Application-Plugin-RequireSSL
  CGI::Application::Plugin::Session/1.03/1/libcgi-application-basic-plugin-bundle-perl/perl-CGI-Application-Plugin-Session
  CGI::Application::Plugin::TT/1.04/1/libcgi-application-extra-plugin-bundle-perl/perl-CGI-Application-Plugin-TT
  CGI::Carp/1.30/1/perl-modules/perl
  CGI::Fast/1.07/0/libcgi-fast-perl/perl-CGI-Fast
  Class::Std/0/1/libclass-std-perl/perl-Class-Std
  Config::Std/0.007/1/libconfig-std-perl/perl-Config-Std/
  CPAN/1.9402/1/perl-modules/perl-CPAN
  Crypt::GeneratePassword/0.03/1/libcrypt-generatepassword-perl/perl-Crypt-GeneratePassword
  Crypt::OpenSSL::RSA/0.25/1/libcrypt-openssl-rsa-perl/perl-Crypt-OpenSSL-RSA
  Cwd/3.3/1/perl-base/perl
  Data::Dumper/2.124/1/perl/perl
  Data::Page/2.02/1/libdata-perl-perl/perl-Data-Page
  Data::Password/1.07/1/libdata-password-perl/perl-Data-Password
  DBI/1.612/1/libdbi-perl/perl-DBI
  DBD::MySQL/0/1/libdbd-mysql-perl/perl-DBD-MySQL
  Digest::MD5/2.39/1/perl/perl-Digest-MD5
  Digest::Perl::MD5/1.8/1/libdigest-perl-md5/
  Digest::SHA/5.48/1/libdigest-sha-perl/perl-Digest-SHA
  File::Basename/2.77/1/perl-modules/perl
  File::Temp/0.22/1/perl-modules/perl
  FCGI/0/0/libfcgi-perl/perl-FCGI
  Getopt::Long/2.38/1/perl-base/perl
  HTML::Clean/0.8/1/libhtml-clean-perl/perl-HTML-Clean
  IO::File/1.14/1/perl-base/perl
  IO::Socket::INET6/2.65/1/libio-socket-inet6-perl/
  List::Util/1.21/1/perl-base/perl
  Locale::Maketext/0/1/perl-modules/perl-Locale-Maketext-Simple
  Mail::SpamAssassin/3.00/1/spamassassin/perl-Mail-SpamAssassin
  MIME::Base64/3.08/1/perl/perl
  Net::Server/0/1/libnet-server-perl/perl-Net-Server
  Net::Domain/2.20/1/perl-modules/
  Net::IMAP::Client/0.93/1/libnet-imap-client-perl/perl-Net-IMAP-Client
  Net::POP3/2.29/1/perl-modules/perl
  Net::SMTP/2.31/1/perl-modules/perl
  Readonly/0/1/libreadonly-perl/perl-Readonly
  Sys::Syslog/0.27/1/perl/perl
  Template/2.22/1/libtemplate-perl/perl-Template-Toolkit
  Test::More/0.92/1/perl-modules/perl
  Text::CSV_XS/0.73/1/libtext-csv-xs-perl/perl-Text-CSV_XS
  Time::HiRes/1.9719/1/perl/perl
);

# First try to install missing modules
my @debs        = ();
my @rpms        = ();
my $num_missing = 0;
foreach my $modLine (@modules) {
    my ( $module, $version, $req, $debpkg, $rpmpkg ) = split /\//, $modLine;
    my $ver = &get_version($module);
    if ( $ver && $ver ge $version ) {

        # installed and version ok
        next;
    }
    elsif ($req) {
        if ($debpkg) {
            push( @debs, $debpkg );
        }
        if ($rpmpkg) {
            push( @rpms, $rpmpkg );
        }
        $num_missing++;
    }
}
print "Need to install $num_missing missing modules ...\n";
my $os = &get_os_type();
if ( $os eq 'debian' && scalar(@debs) > 0 ) {
    if ( &ask_yesno( 'Is it ok to install ' . scalar(@debs) . ' packages using apt-get?' ) ) {
        &install_deb(@debs);
    }
}
elsif ( $os eq 'redhat' && scalar(@rpms) > 0 && &ask_yesno( 'Is it ok to install ' . scalar(@rpms) . ' packages using yum?' ) ) {
    &install_yum(@rpms);
}
elsif ( $os eq 'suse' && scalar(@rpms) > 0 && &ask_yesno( 'Is it ok to install ' . scalar(@rpms) . ' packages using zypper?' ) ) {
    &install_zypper(@rpms);
}

my @cpan = ();
$num_missing = 0;
foreach my $modLine (@modules) {
    my ( $module, $version, $req, $debpkg, $rpmpkg ) = split /\//, $modLine;
    my $ver = &get_version($module);
    if ( $ver && $ver ge $version ) {

        # installed and version ok
        next;
    }
    elsif ($req) {
        push( @cpan, $module );
        $num_missing++;
    }
}
if ( &ask_yesno("Is it ok to install $num_missing modules from CPAN?") ) {
    &install_cpan(@cpan);
}

# Then report results
my $tpl = "%40s [%4s]\n";

print "Checking required Perl modules ...\n";
foreach my $modLine (@modules) {
    my ( $module, $version, $req, $debpkg, $rpmpkg ) = split /\//, $modLine;
    my $ver = &get_version($module);

    if ( $ver && $ver ge $version ) {

        # installed and version ok
        printf( $tpl, $module, GREEN "OK" );
    }
    else {
        printf( $tpl, $module, BOLD RED "ERROR" );
    }
}

exit 0;

sub get_version {
    my $module = shift;
    my $ver;

    no warnings 'once';
    open OLDOUT, ">&STDOUT";
    open OLDERR, ">&STDERR";
    open OLDIN,  "<&STDIN";
    open STDIN,  '<', '/dev/null';
    open STDOUT, '>', '/dev/null';
    open STDERR, '>', '/dev/null';
    $ver = eval("use $module; $module->VERSION;");
    open STDOUT, ">&OLDOUT";
    open STDERR, ">&OLDERR";
    open STDIN,  "<&OLDIN";
    use warnings 'once';

    return $ver;
}

sub get_os_type {
    my %dist_files = (
        '/etc/arch-release'      => 'unix',
        '/etc/debian_version'    => 'debian',
        '/etc/fedora-release'    => 'redhat',
        '/etc/gentoo-release'    => 'unix',
        '/etc/knoppix_version'   => 'debian',
        '/etc/mandriva-release'  => 'unix',
        '/etc/mandrake-release'  => 'unix',
        '/etc/redhat-release'    => 'redhat',
        '/etc/slackware-version' => 'unix',
        '/etc/SuSE-release'      => 'suse',
        '/etc/trustix-release'   => 'unix',
        '/etc/ubuntu_version'    => 'debian',
        '/etc/vmware-release'    => 'vmware',
    );

    if ( $^O eq 'MSWin32' ) {
        return 'windows';
    }
    elsif ( $^O ne 'linux' ) {
        return 'unix';
    }
    else {
        foreach my $dist_file ( keys %dist_files ) {
            if ( -f $dist_file ) {
                return $dist_files{$dist_file};
            }
        }
        return 'unix';
    }
}

sub ask_yesno {
    my $msg = shift;
    print $msg. " [y/N]: ";
    my $resp = <STDIN>;
    return unless $resp;
    chomp($resp);
    if ( $resp =~ m/(1|Yes|Ja|Y)/i ) {
        return 1;
    }
    return;
}

sub has_sudo {
    if ( !-f '/usr/bin/sudo' ) {
        return;
    }
    my $cmd = "/usr/bin/sudo /bin/true";
    my $rv  = system($cmd) >> 8;
    if ( $rv == 0 ) {
        return 1;
    }
    else {
        return;
    }
}

sub is_root {
    return $EFFECTIVE_USER_ID == 0;
}

sub get_pre_cmd {
    if ( &is_root() ) {
        return '';
    }
    elsif ( &has_sudo() ) {
        return 'sudo ';
    }
    else {
        return 'echo ';
    }
}

sub install_deb {
    my @pkgs = @_;
    my $cmd  = &get_pre_cmd() . "apt-get --yes --assume-yes install " . join( " ", @pkgs ) . " >>/tmp/vboxadm-inst_deps.out 2>&1";
    my $rv   = system($cmd) >> 8;
    if ( $rv == 0 ) {
        return 1;
    }
    else {
        return;
    }
}

sub install_yum {
    my @pkgs = @_;
    my $cmd  = &get_pre_cmd() . "yum -y install " . join( " ", @pkgs ) . " >>/tmp/vboxadm-inst_deps.out 2>&1";
    my $rv   = system($cmd) >> 8;
    if ( $rv == 0 ) {
        return 1;
    }
    else {
        return;
    }
}

sub install_zypper {
    my @pkgs = @_;
    my $cmd  = &get_pre_cmd() . "zypper -y install " . join( " ", @pkgs ) . " >>/tmp/vboxadm-inst_deps.out 2>&1";
    my $rv   = system($cmd) >> 8;
    if ( $rv == 0 ) {
        return 1;
    }
    else {
        return;
    }
}

sub install_cpan {
    my @modules = @_;
    if ( &is_root() ) {
        my $status = 1;
        foreach my $module (@modules) {
            if ( !CPAN::Shell->install($module) ) {
                $status = 0;
            }
        }
        return $status;
    }
    else {
        print "Run 'perl -MCPAN -eshell' and then 'install " . join( " ", @modules ) . "\n";
        return;
    }
}

sub install_ppm {
    my $module = shift;

    $module =~ s/::/-/g;

    my $cmd = "ppm install " . $module;
    my $rv  = system($cmd) >> 8;
    if ( $rv == 0 ) {
        return 1;
    }
    else {
        return;
    }
}
