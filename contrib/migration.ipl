#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use Getopt::Long;
use Config::Std;

use VBoxAdm::Utils '@VERSION@';
use VBoxAdm::DovecotPW '@VERSION@';

my $db_host = 'localhost';
my $db_user = 'vacation';
my $db_pass = '';
my $db_port = 3306;
my $db_db   = 'vboxadm';

my ( $conffile_used, %config, );

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
);

GetOptions(
    'source|s=s'    => \$config{'source'},
    'source-db|d=s' => \$config{'source-db'},
    'truncate!'     => \$config{'truncate'},
    'verbose|v+'    => \$config{'verbose'},
    'dry|d!'        => \$config{'dry'},

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or die("Unknown Command");

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

if ( !$config{'source'} ) {
    die("No --source given!\n");
}

$db_host = $config{'default'}{'dbhost'} || $db_host;
$db_user = $config{'default'}{'dbuser'} || $db_user;
$db_pass = $config{'default'}{'dbpass'} || $db_pass;
$db_port = $config{'default'}{'dbport'} || $db_port;
$db_db   = $config{'default'}{'dbdb'}   || $db_db;
my $pwscheme = $config{'cgi'}{'pwscheme'} || 'ssha256';

die("This script is completely untested. You should not use it.\n");

# if all these preconditions succeed:
my $dsn = "DBI:mysql:host=$db_host;database=$db_db;port=$db_port;user=$db_user;password=$db_pass";
my $dbh = DBI->connect( $dsn, undef, undef, { RaiseError => 0, } );

my $sql_new_domain = "INSERT INTO vboxadm.domains (name,is_active) VALUES(?,?)";
my $sth_new_domain = $dbh->prepare($sql_new_domain);
my $sql_new_alias  = "INSERT INTO vboxadm.aliases (domain_id,local_part,goto,is_active) VALUES(?,?,?,?)";
my $sth_new_alias  = $dbh->prepare($sql_new_alias);
my $sql_new_mailbox =
"INSERT INTO vboxadm.mailboxes (domain_id,local_part,password,name,is_active,max_msg_size,is_on_vacation,vacation_subj,vacation_msg,is_domainadmin,is_superadmin,sa_active,sa_kill_score) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
my $sth_new_mailbox      = $dbh->prepare($sql_new_mailbox);
my $sql_new_domain_alias = "INSERT INTO vboxadm.domain_aliases (name,domain_id,is_active) VALUES(?,?,1)";
my $sth_new_domain_alias = $dbh->prepare($sql_new_domain_alias);
my $sql_vacation_status  = "INSERT INTO vboxadm.vacation_notify (on_vacation,notified,notified_at) VALUES(?,?,?)";
my $sth_vacation_status  = $dbh->prepare($sql_vacation_status);
my $sql_set_admin =
  "UPDATE vboxadm.mailboxes SET is_domainadmin = ?, is_superadmin = ? WHERE local_part = ? AND domain_id = (SELECT id FROM domains WHERE name = ?)";
my $sth_set_admin = $dbh->prepare($sql_set_admin);

if ( $config{'truncate'} ) {
    $dbh->do('TRUNCATE TABLE vboxadm.aliases');
    $dbh->do('TRUNCATE TABLE vboxadm.mailboxes');
    $dbh->do('TRUNCATE TABLE vboxadm.domains');
}

###########################################################################
# DEBMIN2
###########################################################################
if ( $config{'source'} eq 'debmin2' ) {
    if ( !$config{'source-db'} ) {
        $config{'source-db'} = 'sysmgm_ng';
    }
    my $sql_domains = 'SELECT id,domain,is_enabled FROM `' . $config{'source-db'} . '`.domains ORDER BY domain';
    my $sth_domains = $dbh->prepare($sql_domains);
    my $sql_mailboxes =
        'SELECT local_part,forward,cc,name,pwclear,is_away,away_text,spam_check,is_enabled FROM `'
      . $config{'source-db'}
      . '`.mail_accounts WHERE domain = ? ORDER BY local_part';
    my $sth_mailboxes = $dbh->prepare($sql_mailboxes);
    $sth_domains->execute();

    #
    # CREATE DOMAINS
    #
  DOMAIN: while ( my ( $old_domain_id, $domain_name, $domain_is_enabled ) = $sth_domains->fetchrow_array() ) {
        my $domain_is_active = 1;
        if ( $domain_is_enabled && $domain_is_enabled =~ m/(no|0)/i ) {
            $domain_is_active = 0;
        }
        $domain_name = lc($domain_name);
        if ( !$config{'dry'} && $sth_new_domain->execute( $domain_name, $domain_is_active ) ) {
            print "Created new Domain '$domain_name'\n";
        }
        else {
            print "Failed to create new domain '$domain_name': " . $sth_new_domain->errstr . "\n";
            next DOMAIN;
        }
        my $new_domain_id = $dbh->last_insert_id( undef, undef, undef, undef );
        $sth_mailboxes->execute($old_domain_id);

        #
        # CREATE MAILBOXES
        #
      MAILBOX: while ( my @row = $sth_mailboxes->fetchrow_array() ) {
            my ( $local_part, $forward, $cc, $name, $pwclear, $is_away, $away_text, $spam_check, $is_enabled ) = @row;
            $local_part = lc($local_part);
            my $sa_active = 1;
            if ( $spam_check && $spam_check =~ m/(no|0)/i ) {
                $sa_active = 0;
            }
            my $is_on_vacation = 0;
            if ( $is_away && $is_away =~ m/(yes|1)/i ) {
                $is_on_vacation = 1;
            }
            my $is_active = 1;
            if ( $is_enabled && $is_enabled =~ m/(no|0)/i ) {
                $is_active = 0;
            }
            $away_text ||= '';
            if ( !$forward ) {

                # a real mailbox
                if (
                    !$config{'dry'}
                    && $sth_new_mailbox->execute(
                        $new_domain_id, $local_part, VBoxAdm::DovecotPW::make_pass( $pwclear, $pwscheme ),
                        $name, $is_active, 15360, $is_on_vacation, 'On Vacation', $away_text, 0, 0, $sa_active, 6.31
                    )
                  )
                {
                    print "\tCreated new Mailbox: $local_part\@$domain_name\n";
                }
                else {
                    print "\tFailed to create new Mailbox $local_part\@$domain_name: " . $sth_new_mailbox->errstr . "\n";
                }
            }
            else {

                # an alias
                if ( !$config{'dry'} && $sth_new_alias->execute( $new_domain_id, $local_part, $forward, $is_active ) ) {
                    print "\tCreated new Alias: $local_part\@$domain_name\n";
                }
                else {
                    print "\tFailed to create new Alias $local_part\@$domain_name: " . $sth_new_mailbox->errstr . "\n";
                }
            }

            # handle cc, too (insert as alias)
            if ($cc) {
                if ( !$config{'dry'} && $sth_new_alias->execute( $new_domain_id, $local_part, $cc, $is_active ) ) {
                    print "\tCreated new Alias (CC): $local_part\@$domain_name\n";
                }
                else {
                    print "\tFailed to create new Alias (CC) $local_part\@$domain_name: " . $sth_new_mailbox->errstr . "\n";
                }
            }
        }
    }
    $sth_mailboxes->finish();
    $sth_domains->finish();
}
###########################################################################
# VEXIM
###########################################################################
elsif ( $config{'source'} eq 'vexim' ) {
    if ( !$config{'source-db'} ) {
        $config{'source-db'} = 'vexim';
    }

    #
    # Iterate over all domains, we need the domain_id
    #
    my $query       = 'SELECT domain_id,domain,enabled FROM `' . $config{'source-db'} . '`.domains';
    my $sth_domains = $dbh->prepare($query);
    $query = "SELECT alias FROM vexim.domainalias WHERE domain_id = ?";
    my $sth_domainalias = $dbh->prepare($query);
    $query =
        'SELECT localpart,clear,smtp,pop,type,admin,on_vacation,enabled,forward,maxmsgsize,quota,realname,vacation,on_spamassassin,sa_refuse FROM `'
      . $config{'source-db'}
      . '`.users WHERE domain_id = ?';
    my $sth_users = $dbh->prepare($query);

    $sth_domains->execute();
    while ( my ( $old_domain_id, $domain, $is_active ) = $sth_domains->fetchrow_array() ) {

        #
        # Create new domain
        #
        $sth_new_domain->execute( $domain, $is_active ) unless $config{'dry'};
        my $new_domain_id = $dbh->last_insert_id( undef, undef, undef, undef ) || 1;

        #
        # Convert domain_aliases
        #
        $sth_domainalias->execute($old_domain_id);
        while ( my $domain_alias = $sth_domainalias->fetchrow_array() ) {

            #
            # Create new domain alias
            #
            $sth_new_domain_alias->execute( $domain_alias, $new_domain_id ) unless $config{'dry'};
        }

        #
        # Convert users/aliases
        #
        $sth_users->execute($old_domain_id);
        while ( my @row = $sth_users->fetchrow_array() ) {
            my (
                $localpart, $pwclear,    $smtp,  $pop,      $type,         $admin,     $on_vacation, $enabled,
                $forward,   $maxmsgsize, $quota, $realname, $vacation_msg, $sa_active, $sa_kill_score,
            ) = @row;
            my $is_siteadmin   = 0;
            my $is_domainadmin = 0;
            my $is_alias       = 0;
            my $is_local       = 0;
            $vacation_msg ||= '';
            $vacation_msg = trim($vacation_msg);
            if ( $type eq 'site' && $admin ) {
                $is_siteadmin = 1;
            }
            if ( $type eq 'local' && $admin ) {
                $is_domainadmin = 1;
            }
            if ( $type eq 'alias' ) {
                $is_alias = 1;
                $forward  = $smtp;
                $forward  = trim($forward);
                $forward =~ s/\s+/,/g;
            }
            if ( $type eq 'local' ) {
                $is_local = 1;
            }
            if ( $type eq 'local' && $forward ) {
                $is_alias = 1;
            }
            if ($is_alias) {
                $sth_new_alias->execute( $new_domain_id, $localpart, $forward, $enabled ) unless $config{'dry'};
                print "New Alias: $new_domain_id, $localpart, $forward, $enabled\n";
            }
            if ($is_local) {
                $sth_new_mailbox->execute(
                    $new_domain_id, $localpart, VBoxAdm::DovecotPW::make_pass( $pwclear, $pwscheme ),
                    $realname, $enabled, $maxmsgsize, $on_vacation, 'Out of Office',
                    $vacation_msg, $quota, $is_domainadmin, $is_siteadmin, $sa_active, $sa_kill_score,
                ) unless $config{'dry'};
                print
"New Mailbox: $new_domain_id, $localpart, $pwclear, $realname, $enabled, $maxmsgsize, $on_vacation,'$vacation_msg',$quota,$is_domainadmin,$is_siteadmin\n";
            }
        }
    }
    $sth_domains->finish();
    $sth_domainalias->finish();
    $sth_users->finish();
}
###########################################################################
# POSTFIXADMIN
###########################################################################
elsif ( $config{'source'} eq 'postfixadmin' ) {
    if ( !$config{'source-db'} ) {
        $config{'source-db'} = 'postfix';
    }
    my $sql_domains         = "SELECT domain, active FROM domain ORDER BY domain";
    my $sth_domains         = $dbh->prepare($sql_domains);
    my $sql_alias_domains   = "SELECT alias_domain, active FROM alias_domain WHERE target_domain = ? ORDER BY alias_domain";
    my $sth_alias_domains   = $dbh->prepare($sql_alias_domains);
    my $sql_mailboxes       = "SELECT local_part, password, name, quota, active FROM mailbox WHERE domain = ?";
    my $sth_mailboxes       = $dbh->prepare($sql_mailboxes);
    my $sql_domain_admin    = "SELECT username, domain FROM domains_admins WHERE active = 1";
    my $sth_domain_admin    = $dbh->prepare($sql_domain_admin);
    my $sql_vacation        = "SELECT subject, body FROM vacation WHERE email = ?";
    my $sth_vacation        = $dbh->prepare($sql_vacation);
    my $sql_vacation_notify = "SELECT on_vacation, notified, notified_at FROM vacation_notification WHERE notified_at > NOW() - INTERVAL 1 MONTH";
    my $sth_vacation_notify = $dbh->prepare($sql_vacation_notify);

    #
    # Domains and Mailboxes
    #
    $sth_domains->execute();
    while ( my ( $domain, $is_active ) = $sth_domains->fetchrow_array() ) {

        # create a new domain
        $sth_new_domain->execute( $domain, $is_active ) unless $config{'dry'};
        my $new_domain_id = $dbh->last_insert_id( undef, undef, undef, undef ) || 1;
        $sth_mailboxes->execute($domain);
        while ( my @row = $sth_mailboxes->fetchrow_array() ) {
            my ( $local_part, $password, $name, $quota, $is_active ) = @row;
            my $is_on_vacation = 0;
            my $vacation_subj  = '';
            my $vacation_msg   = '';
            my $sa_active      = 1;
            my $sa_kill_score  = 6.31;
            my $is_domainadmin = 0;
            my $is_siteadmin   = 0;
            my $maxmsgsize     = 15 * 1024 * 1024;
            my $email          = $local_part . '@' . $domain;

            # process each mailbox
            # vacation status
            if ( $sth_vacation->execute($email) ) {
                my ( $subj, $msg ) = $sth_vacation->fetchrow_array();
                if ( $subj && $msg ) {
                    $is_on_vacation = 1;
                    $vacation_subj  = $subj;
                    $vacation_msg   = $msg;
                }
            }
            $sth_new_mailbox->execute( $new_domain_id, $local_part, VBoxAdm::DovecotPW::make_pass( $password, $pwscheme ),
                $name, $is_active, $maxmsgsize, $is_on_vacation, $vacation_subj, $vacation_msg, $quota, $is_domainadmin, $is_siteadmin, $sa_active,
                $sa_kill_score, )
              unless $config{'dry'};
            print
"New Mailbox: $new_domain_id, $local_part, $password, $name, $is_active, $maxmsgsize, $is_on_vacation,'$vacation_msg',$quota,$is_domainadmin,$is_siteadmin\n";
        }

        # domains aliases
        $sth_alias_domains->execute($domain);
        while ( my ( $domain_alias, $is_active ) = $sth_alias_domains->fetchrow_array() ) {

            # create new alias domain
            $sth_new_domain_alias->execute( $domain_alias, $new_domain_id ) unless $config{'dry'};
        }
    }

    # vacation notify
    $sth_vacation_notify->execute();
    while ( my ( $on_vacation, $notified, $notified_at ) = $sth_vacation_notify->fetchrow_array() ) {

        # insert vacation status
        $sth_vacation_status->execute( $on_vacation, $notified, $notified_at );
    }

    # domainadmins
    $sth_domain_admin->execute();
    while ( my ( $email, $domain ) = $sth_domain_admin->fetchrow_array() ) {
        my ( $local_part, $domain ) = split( /@/, $email );

        # update this user, set is_domainadmin = 1
        $sth_set_admin->execute( 1, 0, $local_part, $domain );

    }

    $sth_domains->finish();
    $sth_alias_domains->finish();
    $sth_mailboxes->finish();
    $sth_domain_admin->finish();
    $sth_vacation->finish();
    $sth_vacation_notify->finish();
}
else {
    print "Invalid source!\n";
}

$sth_new_domain->finish();
$sth_new_alias->finish();
$sth_new_mailbox->finish();
$sth_vacation_status->finish();
$sth_set_admin->finish();
$dbh->disconnect();
exit 0;
__END__
