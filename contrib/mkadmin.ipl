#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use Getopt::Long;
use Config::Std;
use Crypt::GeneratePassword;

use VBoxAdm::Utils '@VERSION@';
use VBoxAdm::DovecotPW '@VERSION@';

my $db_host = 'localhost';
my $db_user = 'vacation';
my $db_pass = '';
my $db_port = 3306;
my $db_db   = 'vboxadm';

my ( $conffile_used, @hooks, %hook, %config, $email, %do );

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
  /etc/postfix/vboxadm.conf
);

GetOptions(
    'verbose|v+'   => \$config{'verbose'},
    'dry|d!'       => \$config{'dry'},
    'username|u=s' => \$email,

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or die("Unknown Command");

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}
my $dbi = {};
$dbi->{'host'} = $config{'default'}{'dbhost'} || $db_host;
$dbi->{'user'} = $config{'default'}{'dbuser'} || $db_user;
$dbi->{'pass'} = $config{'default'}{'dbpass'} || $db_pass;
$dbi->{'port'} = $config{'default'}{'dbport'} || $db_port;
$dbi->{'db'}   = $config{'default'}{'dbdb'}   || $db_db;
my $pwscheme = $config{'cgi'}{'pwscheme'} || 'sha256';

# Most of this code is disabled since it is unfinished yet.
if (0) {

    # Ask for options
    if ( !$do{'create-database'} ) {
        $do{'create-database'} = &ask_yesno('Create Database?');
    }
    if ( !$do{'create-database-grants'} ) {
        $do{'create-database-grants'} = &ask_yesno('Create Database User?');
    }
    if ( !$do{'init-db'} ) {
        $do{'init-db'} = &ask_yesno('Initialize Database?');
    }
    if ( !$do{'create-site-admin'} ) {
        $do{'create-site-admin'} = &ask_yesno('Create site-admin?');
    }
    if ( !$do{'configure-smtpproxy'} ) {
        $do{'configure-smtpproxy'} = &ask_yesno('Configure the SMTP-Proxy?');
    }
    if ( !$do{'enable-smtpproxy'} ) {
        $do{'enable-smtpproxy'} = &ask_yesno('Start SMTP-Proxy at boot?');
    }
    if ( !$do{'create-ssl'} ) {
        $do{'create-ssl'} = &ask_yesno('Create self-signed SSL cert?');
    }
    if ( !$do{'init-postfix-maps'} ) {
        $do{'init-postfix-maps'} = &ask_yesno('Initilize Postfix Maps files?');
    }
    if ( !$do{'configure-postfix'} ) {
        $do{'configure-postfix'} = &ask_yesno('Configure Postfix?');
    }
    if ( !$do{'configure-dovecot'} ) {
        $do{'configure-dovecot'} = &ask_yesno('Configure Dovecot?');
    }
}
else {
    &create_siteadmin();
}

###
# BASIC
###
# Create Database
# --db-root-user, --db-root-pass, --db-user, --db-pass, --db-name
# - CREATE DATABASE
# - GRANT
# - initialize
my $dbh;    # TODO connect to DB as root
my $vboxadm_db;
my $roundcube_db;
my $user_ref;
if ( $do{'create-database'} ) {
    my $vboxadm_db   = &create_database( $dbh, 'vboxadm' );
    my $roundcube_db = &create_database( $dbh, 'roundcube' );
}
if ( $do{'create-database-grants'} && $vboxadm_db && $roundcube_db ) {
    $user_ref = &create_database_grants( $dbh, $vboxadm_db, $roundcube_db );
}
if ( $do{'init-db'} ) {
    &initialize_database($dbi);    # TODO set $dbi
}

# TODO write configuration

# Select pwscheme
# --pwscheme

# Create Site-Admin
# --create-site-admin

# Configure SMTP-Proxy
# --configure-smtpproxy

# Enable SMTP-Proxy
# --enable-smtpproxy

###
# ADVANCED
###
# Create self-signed ssl cert
# --create-ssl

# Create Postfix Maps
# --create-postfix-maps

# Configure Postfix
# --configure-postfix

# Configure Dovecot
# --configure-dovecot

###
# TESTS
###
# Check DNS setting
# - hostname + domain -> one of this hosts ips
# - reverse of this ip -> hostname + domain
# Test SMTP (+Auth)
# Test POP3
# Test IMAP

####
# SUBS
####
sub initialize_database {
    my $dbi      = shift;
    my $database = shift;

    my $cmd = "mysql -f -u$dbi->{'user'} -p$dbi->{'pass'} -h$dbi->{'host'} --port=$dbi->{'port'} $database < doc/schema.sql";

    my $rv = system($cmd) >> 8;

    if ( $rv == 0 ) {
        return 1;
    }
    return;
}

sub create_database {
    my $dbh      = shift;
    my $database = shift;

    my $sql = "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ?";
    my $sth = $dbh->prepare($sql);
    $sth->execute($database);
    my $num = $sth->fetchrow_array();
    my $i   = 0;

    # find a free db name
    while ( $num > 0 ) {
        $i++;
        $sth->execute( $database . $i );
        $num = $sth->fetchrow_array();
    }
    $database .= $i if $i;

    $sql = "CREATE DATABASE \`$database\`";
    $dbh->do($sql);

    return $database;
}

sub create_database_grants {
    my $dbh         = shift;
    my $database    = shift;
    my $rc_database = shift;

    my %user = ();

    # User: vboxadm@localhost
    my $password = Crypt::GeneratePassword::word( 8, 12 );
    my $sql = "GRANT ALL ON \`$database\`.* TO 'vboxadm'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $user{'vboxadm'} = $password;

    # User: postfix@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT SELECT ON \`$database\`.* TO 'postfix'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $user{'postfix'} = $password;

    # User: dovecot@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT ALL ON \`$database\`.mailboxes TO 'dovecot'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $sql = "GRANT ALL ON \`$database\`.domains TO 'dovecot'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $user{'dovecot'} = $password;

    # User: roundcube@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT ALL ON \`$rc_database\`.* TO 'roundcube'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $user{'roundcube'} = $password;

    # User: vboxadm_user@localhost
    $password = Crypt::GeneratePassword::word( 8, 12 );
    $sql = "GRANT SELECT,UPDATE ON \`$database\`.mailboxes TO 'vboxadm_user'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $sql = "GRANT SELECT ON \`$database\`.domains TO 'vboxadm_user'\@'localhost' IDENTIFIED BY '$password'";
    $dbh->do($sql);
    $user{'vboxadm_user'} = $password;

    # Flush privileges
    $sql = "FLUSH PRIVILEGES";
    $dbh->do($sql);

    return \%user;
}

sub create_siteadmin {
    if ( !$email ) {
        print "Please enter the username (as user\@domain.tld) for the designated site-admin:\n";
        $email = <STDIN>;
        chomp($email);
    }
    if ( !&VBoxAdm::Utils::is_valid_address_rfc822($email) ) {
        die("Invalid Email-Address given: $email\n");
    }
    my ( $local_part, $domain ) = split( /@/, $email );

    # if all these preconditions succeed:
    my $dsn = "DBI:mysql:host=$db_host;database=$db_db;port=$db_port;user=$db_user;password=$db_pass";
    my $dbh = DBI->connect( $dsn, undef, undef, { RaiseError => 0, } );
    if ( !$dbh ) {
        print STDERR "Could not connect to database. Aborting.\n";
        return;
    }

    # Create Domain
    my $sql = "INSERT INTO domains (name,is_active) VALUES(?,1)";
    my $sth = $dbh->prepare($sql);
    $sth->execute($domain);
    $sth->finish();

    $sql = "SELECT id FROM domains WHERE name = ?";
    $sth = $dbh->prepare($sql);
    $sth->execute($domain);
    my $domain_id = $sth->fetchrow_array();
    $sth->finish();

    my $password = Crypt::GeneratePassword::word( 8, 12 );

    $sql = "INSERT INTO mailboxes (domain_id,local_part,password,is_active,is_superadmin) VALUES(?,?,?,1,1)";
    $sth = $dbh->prepare($sql);
    $sth->execute( $domain_id, $local_part, VBoxAdm::DovecotPW::make_pass( $password, $pwscheme ) );
    $sth->finish();

    print "User $email created. Your password is '$password'.\n";

    $dbh->disconnect();
}

exit 0;

sub ask_yesno {
    my $msg = shift;
    print $msg. " [y/N]: ";
    my $resp = <STDIN>;
    chomp($resp);
    if ( $resp =~ m/(1|Yes|Ja|Y)/i ) {
        return 1;
    }
    return;
}

sub ask_number {
    my $msg = shift;
    print $msg. ": ";
    my $resp = <STDIN>;
    chomp($resp);
    if ( $resp =~ m/^\s*(\d+)\s*$/ ) {
        return $1;
    }
    return;
}

sub ask_string {
    my $msg = shift;
    print $msg. ": ";
    my $resp = <STDIN>;
    chomp($resp);
    return $resp;
}
__END__
