#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use Config::Std;
use Getopt::Long;
use Sys::Syslog;

use VBoxAdm::DB '@VERSION@';

my ( $conffile_used, @hooks, %hook, %config, );

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
);

GetOptions(
    'sender|s=s'    => \$config{'sender'},
    'recipient|r=s' => \$config{'recipient'},
    'verbose|v+'    => \$config{'verbose'},

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or &usage();

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

openlog( 'vboxadm-cleanup', 'ndelay,nofatal', 'mail' );

# Determine options
my $dbhost = $config{'default'}{'dbhost'} || 'localhost';
my $dbuser = $config{'default'}{'dbuser'} || 'vboxadm';
my $dbpass = $config{'default'}{'dbpass'} || 'vboxadm';
my $dbport = $config{'default'}{'dbport'} || 3306;
my $dbdb   = $config{'default'}{'dbdb'}   || 'vboxadm';
$config{'vacation'}{'notify_interval'} ||= 3600 * 24 * 7;
$config{'awl'}{'lifetime'} ||= 365;

my $dsn = "DBI:mysql:host=$dbhost;database=$dbdb;port=$dbport;user=$dbuser;password=$dbpass";
my $dbh = &VBoxAdm::DB::connect($dsn);

if ( !$dbh ) {
    syslog( 2, 'Could not connect to database with DSN $dsn - Exiting' );
    closelog();
    die("Could not connect to database with DSN $dsn");
}

# cronjob which does this:
# - remove deleted mailboxes
&purge_mailboxes( $dbh, \%config );

# - remove expired vacation_notify entries
&clean_vacation( $dbh, \%config );

# TODO remove mails marked as deleted

# remove expired AWL entries
&clean_awl( $dbh, \%config );

$dbh->disconnect();

# TODO reconnect to db using the mailarchive credentials

&create_archive_tables( $dbh, \%config );
&optimize_archive_tables( $dbh, \%config );
&expire_archive_tables( $dbh, \%config );

closelog();
exit 0;

###########################################################################
# Subs
###########################################################################
sub optimize_archive_tables {
    my $dbh    = shift;
    my $config = shift;

    # TODO optimize all archiv tables no longer in use
}

sub expire_archive_table {
    my $dbh    = shift;
    my $config = shift;

    # TODO delete archive tables which are expired
}

sub purge_mailboxes {

    # - remove deleted mailboxes
    # -- get all mailboxes from db into hash
    # -- traverse over maildirs and remove all maildirs not in hash
    my $dbh    = shift;
    my $config = shift;

    if ( !$config->{'default'}{'mail_location'} ) {
        my $msg = 'mail_location is not set. Aborting!';
        syslog( 2, $msg );
        print STDERR $msg . "\n";
        return;
    }
    elsif ( !-d $config->{'default'}{'mail_location'} ) {
        my $msg = 'mail_location (' . $config->{'default'}{'mail_location'} . ') is no directory. Aborting!';
        syslog( 2, $msg );
        print STDERR $msg . "\n";
        return;
    }

    my $query = "SELECT m.local_part,d.name FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id";
    my $sth   = $dbh->prepare($query);
    $sth->execute();
    my %mailboxes = ();
    while ( my ( $local_part, $domain ) = $sth->fetchrow_array() ) {
        $mailboxes{$domain}{$local_part} = 1;
    }
    $sth->finish();

    my $basedir = $config->{'default'}{'mail_location'};
    if ( opendir( my $DH, $basedir ) ) {
        while ( my $domain = readdir($DH) ) {
            next if $domain =~ m/^\./;
            my $domain_dir = $basedir . '/' . $domain;
            next unless -d $domain_dir;
            if ( opendir( my $MH, $domain_dir ) ) {
                while ( my $mailbox = readdir($MH) ) {
                    next if $mailbox =~ m/^\./;
                    my $mailbox_dir = $domain_dir . '/' . $mailbox;
                    next unless -d $mailbox_dir;
                    next if $mailboxes{$domain}{$mailbox};
                    my $cmd = 'rm -rf ' . $mailbox_dir;
                    my $rv  = 0;
                    print "purge_mailboxes - CMD: $cmd\n" if $config->{'cleanup'}{'verbose'};
                    $rv = system($cmd) >> 8 unless $config->{'cleanup'}{'dry'};

                    if ( $rv != 0 ) {
                        print STDERR "$0 - Could not execute '$cmd': $!\n";
                    }
                    else {
                        syslog( 2, 'Purged Mailbox $mailbox\@$domain' );
                    }
                }
                closedir($MH);
            }
        }
        closedir($DH);
    }

    return 1;
}

sub create_archive_tables {
    my $dbh    = shift;
    my $config = shift;

    # holdback time in years
    my $holdback_years = $config->{'mailarchive'}{'holdback'} || 10;
    my ( $sec, $min, $hour, $dom, $mon, $year, $wday, $yday, $isdst ) = localtime(time);
    $year += 1900;
    $mon++;

    my $dbdb = $config->{'mailarchive'}{'dbdb'} || $config->{'default'}{'dbdb'};
    my $table = 'archiv_' . ( $year + 1 ) . '_';

    # We always make sure to create the tables for the next year
    my $query = "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ? AND TABLE_NAME LIKE ?";
    my $sth   = &VBoxAdm::DB::prepexec( $dbh, $query, $dbdb, $table );
    my $count = $sth->fetchrow_array();
    $sth->finish();

    if ( $config->{'mailarchive'}{'rotate'} eq 'monthly' ) {

        # TODO create monthly tables

=begin sql
CREATE TABLE IF NOT EXISTS `archive_YYYY_MM` (
  `id` bigint(64) NOT NULL AUTO_INCREMENT,
  `body` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=ARCHIVE DEFAULT CHARSET=utf8;
TODO add cols for checksum and signature
=cut

    }
    else {

        # TODO create yearly tables
    }
}

sub clean_vacation {
    my $dbh    = shift;
    my $config = shift;
    my $sql    = "DELETE FROM vacation_notify WHERE notified_at < NOW() - ?";
    my $sth    = $dbh->prepare($sql);
    $sth->execute( $config->{'vacation'}{'notify_interval'} * 2 );
    $sth->finish();

    return 1;
}

sub clean_awl {
    my $dbh    = shift;
    my $config = shift;

    my $query = "DELETE FROM awl WHERE last_seen <= NOW() - INTERVAL ? DAY";
    my $sth   = $dbh->prepare($query)
      or return;
    $sth->execute( $config->{'awl'}{'lifetime'} )
      or return;
    $sth->finish();

    return 1;
}
__END__

=head1 NAME

cleanup - perform misc. regular cleanup jobs.

=head1 VERSION

This documentation refers to VBoxAdm cleanup version @VERSION@
built on @BUILDDATE@.

=head1 DESCRIPTION

This script implements severl regular maintenance jobs.

=head1 CONFIGURATION AND ENVIRONMENT

The configuration file should be place either in /etc/vboxadm.conf or
in /etc/vboxadm/vboxadm.conf. This is a common configuration file
for the whole suite of VBoxAdm applications. Each part of this suite
has its own section in the config file and all use the values
from the default section when appropriate.

=head2 default
The default section should contain at least the database configuration.

dbuser - The user used to connect to the MySQL database.
dbpass - This users password.
dbdb - The db used by this application.
dbhost - The MySQL database host, usually localhost.

=head1 DEPENDENCIES

VBoxAdm::Utils, DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

__END__

This cronjob should run once a day.
