package VBoxAdm::Controller::CLI;

use lib '@LIBDIR@';

use Moose;
use namespace::autoclean;

use English qw(-no_match_vars);
use Carp;
use CPAN;
use Data::Dumper;
use Getopt::Long;
use File::Temp;
use Config::Std;    # TODO use config class
use Net::Domain;
use Net::SMTP;
use Net::POP3;
use Net::IMAP::Client;
use Text::Levenshtein qw(distance);

use VWebAdm::DB '@VERSION@';
use VWebAdm::Utils '@VERSION@';
use VBoxAdm::Migration '@VERSION@';
use VWebAdm::SaltedHash '@VERSION@';
use VWebAdm::Password '@VERSION@';
use VBoxAdm::Model::Alias '@VERSION@';
use VBoxAdm::Model::AWL '@VERSION@';
use VBoxAdm::Model::Domain '@VERSION@';
use VBoxAdm::Model::DomainAlias '@VERSION@';
use VBoxAdm::Model::Mailbox '@VERSION@';
use VBoxAdm::Model::RFCNotify '@VERSION@';
use VBoxAdm::Model::RoleAccount '@VERSION@';
use VBoxAdm::Model::User '@VERSION@';
use VBoxAdm::Model::VacationBlacklist '@VERSION@';
use VBoxAdm::Model::VacationNotify '@VERISON@';
use VWebAdm::Model::MessageQueue '@VERSION@';
use VBoxAdm::L10N '@VERSION@';
use VWebAdm::Logger '@VERSION@';

binmode( STDIN, ':utf8' );

has 'config' => (
    'is'  => 'rw',
    'isa' => 'Object',
);

has 'logger' => (
    'is'      => 'ro',
    'isa'     => 'VWebAdm::Logger',
    'lazy'    => 1,
    'builder' => '_init_logger',
);

has 'dbh' => (
    'is'      => 'ro',
    'isa'     => 'Object',
    'lazy'    => 1,
    'builder' => '_init_dbh',
);

has 'msgq' => (
    'is'      => 'ro',
    'isa'     => 'VWebAdm::Model::MessageQueue',
    'lazy'    => 1,
    'builder' => '_init_msgq',
);

has 'help' => (
    'is'      => 'ro',
    'isa'     => 'HashRef',
    'lazy'    => 1,
    'builder' => '_init_help',
);

has 'actions' => (
    'is'      => 'ro',
    'isa'     => 'HashRef',
    'lazy'    => 1,
    'builder' => '_init_actions',
);

has 'domain' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::Domain',
    'lazy'    => 1,
    'builder' => '_init_domain',
);

sub _init_domain {
    my $self = shift;

    my $Domain = VBoxAdm::Model::Domain::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $Domain;
}

has 'alias' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::Alias',
    'lazy'    => 1,
    'builder' => '_init_alias',
);

sub _init_alias {
    my $self = shift;

    my $Alias = VBoxAdm::Model::Alias::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $Alias;
}

has 'awl' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::AWL',
    'lazy'    => 1,
    'builder' => '_init_awl',
);

sub _init_awl {
    my $self = shift;

    my $AWL = VBoxAdm::Model::AWL::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $AWL;
}

has 'domainalias' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::DomainAlias',
    'lazy'    => 1,
    'builder' => '_init_domainalias',
);

sub _init_domainalias {
    my $self = shift;

    my $DomainAlias = VBoxAdm::Model::DomainAlias::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $DomainAlias;
}

has 'mailbox' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::Mailbox',
    'lazy'    => 1,
    'builder' => '_init_mailbox',
);

sub _init_mailbox {
    my $self = shift;

    my $Mailbox = VBoxAdm::Model::Mailbox::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $Mailbox;
}

has 'migration' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Migration',
    'lazy'    => 1,
    'builder' => '_init_migration',
);

sub _init_migration {
    my $self = shift;

    my $Migration = VBoxAdm::Migration::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
        }
    );

    return $Migration;
}

has 'rfcnotify' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::RFCNotify',
    'lazy'    => 1,
    'builder' => '_init_rfcnotify',
);

sub _init_rfcnotify {
    my $self = shift;

    my $RFCN = VBoxAdm::Model::RFCNotify::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $RFCN;
}

has 'roleaccount' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::RoleAccount',
    'lazy'    => 1,
    'builder' => '_init_roleaccount',
);

sub _init_roleaccount {
    my $self = shift;

    my $RA = VBoxAdm::Model::RoleAccount::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $RA;
}

has 'vacationblacklist' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::VacationBlacklist',
    'lazy'    => 1,
    'builder' => '_init_vacationblacklist',
);

sub _init_vacationblacklist {
    my $self = shift;

    my $VB = VBoxAdm::Model::VacationBlacklist::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $VB;
}

has 'vacationnotify' => (
    'is'      => 'ro',
    'isa'     => 'VBoxAdm::Model::VacationNotify',
    'lazy'    => 1,
    'builder' => '_init_vacationnotify',
);

sub _init_vacationnotify {
    my $self = shift;

    my $VN = VBoxAdm::Model::VacationNotify::->new(
        {
            'dbh'    => $self->dbh(),
            'logger' => $self->logger(),
            'config' => $self->config(),
            'user'   => $self->user(),
            'msgq'   => $self->msgq(),
        }
    );

    return $VN;
}

sub _init_logger {
    my $self = shift;

    return VWebAdm::Logger::->new('vboxadm/cli');
}

sub _init_dbh {
    my $self = shift;

    # TODO refactor config class
    # Database connection
    #
    my $hostname = $self->config()->{'default'}->{'dbhost'} || 'localhost';
    my $database = $self->config()->{'default'}->{'dbdb'}   || 'vboxadm';
    my $username = $self->config()->{'default'}->{'dbuser'} || 'vboxadm';
    my $password = $self->config()->{'default'}->{'dbpass'} || 'vboxadm';
    my $port     = $self->config()->{'default'}->{'dbport'} || 3306;

    my $dsn = "DBI:mysql:host=$hostname;database=$database;port=$port;user=$username;password=$password";
    my $dbh = &VWebAdm::DB::connect( $dsn, { RaiseError => 0, PrintError => 0, } );

    if ( !$dbh ) {
        die("Could not connect to DB!\n");
    }
    else {

        #print "Connected to DB\n";
        return $dbh;
    }
}

sub _init_msgq {
    my $self = shift;
    my $MQ   = VWebAdm::Model::MessageQueue::->new(
        {
            'lh'    => VBoxAdm::L10N->get_handle(),
            'lh_en' => VBoxAdm::L10N->get_handle('en'),
        }
    );
    return $MQ;
}

has 'opts' => (
    'is'      => 'ro',
    'isa'     => 'HashRef',
    'default' => sub { {} },
);

has 'modes' => (
    'is'      => 'ro',
    'isa'     => 'ArrayRef',
    'default' => sub { [] },
);

has 'config_locations' => (
    'is'      => 'ro',
    'isa'     => 'ArrayRef',
    'lazy'    => 1,
    'builder' => '_init_config_locs',
);

sub _init_config_locs {
    my $self = shift;

    # Valid config file locations to try
    my @conffile_locations = qw(
      vboxadm.conf
      conf/vboxadm.conf
      /etc/vboxadm/vboxadm.conf
      @CFGDIR@/vboxadm/vboxadm.conf
    );

    return \@conffile_locations;
}

# TODO allow changing the pw_lock flag on mailboxes

sub _read_options {
    my $self = shift;

    GetOptions(
        'verbose|v+'    => \$self->opts()->{Verbose},
        'dry|d!'        => \$self->opts()->{Dry},
        'quiet|q!'      => \$self->opts()->{Quiet},
        'force|f!'      => \$self->opts()->{Force},
        'name|n=s'      => \$self->opts()->{Name},
        'source|s=s'    => \$self->opts()->{Source},
        'source-db|d=s' => \$self->opts()->{SourceDb},
        'truncate!'     => \$self->opts()->{Truncate},
        'bootstrap!'    => \$self->opts()->{Bootstrap},
        '<>'            => sub { my $m = shift; push( @{ $self->modes() }, lc($m) ); },

        # shift removes name of the option (config) and leaves the value for unshift
        # unshift prepends to the list of valid config files so it is tried first
        'config=s' => sub { shift; unshift( @{ $self->config_locations() }, @_ ); },
        'active|a=i'      => \$self->opts()->{IsActive},
        'goto|g=s'        => \$self->opts()->{Goto},
        'password|p=s'    => sub { shift; my $p = shift; $self->opts()->{Password} = $p; $self->opts()->{PasswordAgain} = $p; },
        'maxmsgsize|m=i'  => \$self->opts()->{MaxMsgSize},
        'siteadmin=s'     => \$self->opts()->{IsSiteadmin},
        'domainadmin=s'   => \$self->opts()->{IsDomainadmin},
        'sakillscore|k=i' => \$self->opts()->{SAKillScore},
        'saactive=i'      => \$self->opts()->{SAActive},
        'vacation=i'      => \$self->opts()->{IsOnVacation},
        'vacsubj=s'       => \$self->opts()->{VacationSubject},
        'vacmsg=s'        => \$self->opts()->{VacationMessage},
        'vacstart=s'      => \$self->opts()->{VacationStart},
        'vacend=s'        => \$self->opts()->{VacationEnd},
        'forcepass!'      => \$self->opts()->{ForcePassword},
    ) or confess "Unknown Command";

    return 1;
}

has 'conffile_used' => (
    'is'  => 'rw',
    'isa' => 'Str',
);

sub _read_config {
    my $self = shift;

    my %config;

    # Try all config file locations
    foreach my $loc ( @{ $self->config_locations() } ) {
        if ( -r $loc ) {
            $self->conffile_used($loc);
            read_config $loc => %config;
            last;
        }
    }

    $config{'default'}{'dbhost'}   ||= 'localhost';
    $config{'default'}{'dbuser'}   ||= 'vboxadm';
    $config{'default'}{'dbpass'}   ||= '';
    $config{'default'}{'dbport'}   ||= 3306;
    $config{'default'}{'dbdb'}     ||= 'vboxadm';
    $config{'default'}{'pwscheme'} ||= 'sha256';

    $self->config( \%config );

    return 1;
}

sub run {
    my $self = shift;

    $self->_read_options();
    $self->_read_config();

    my $module = shift @{ $self->modes() };
    my $action = shift @{ $self->modes() };

    if ( $module && $module eq 'help' ) {
        if ( $action && $self->help()->{$action} ) {
            print $self->help()->{$action} . "\n";
        }
        else {
            print $self->help()->{'help'} . "\n";
        }
    }
    elsif ( $module && $module eq 'migrate' ) {
        return $self->migrate();
    }
    elsif ( $module && $action && ref( $self->actions()->{$module}{$action} ) eq 'CODE' && ( $action eq 'list' || scalar( @{ $self->modes() } ) > 0 ) ) {
        return &{ $self->actions()->{$module}{$action} }( @{ $self->modes() } );
    }
    else {
        print "Invalid/Missing module and/or action.\n";
        if ( $module && $action && $self->actions()->{$module} ) {
            print "Did you mean " . $self->get_similar_action( $action, $module ) . "?\n";
        }
        elsif ( $module && !$self->actions()->{$module} ) {
            print "Did you mean " . $self->get_similar_module($module) . "?\n";
        }
        return;
    }

    return;
}

sub _init_help {
    my $self = shift;

    my %help = (
        'help' => "Invocation: $0 <Module> <Action> <Parameter(s)> <Options>
VBoxAdm CLI Client, Version @VERSION@
Enter 'vboxadm help <module>' to get help for a module.
Available subcommands:
\talias - Manage Aliases
\tawl - Manage Auto-Whitelist
\tdomain - Manage Domains
\tdomainalias - Manage alias domains
\tmailbox - Manage users and mailboxes
\tvacbl - Manage Vacation Blacklist
\tmigrate - Migrate Debmin1, Debmin2, Vexim or Postfix.Admin to VBoxAdm

Options:
-v - Verbose
-d - Dry
-q - Quiet
-f - Force
-n - Name
-s - Source-DB
-d - Destination-DB
--truncate - Truncate Destination before migration
--config - Location of config file
-a - Is active?
-g - Goto/Target
-p - Password
-m - Max. Msg. Size in MB
--siteadmin - Is Siteadmin?
--domainadmin - Is Domainadmin?
-k - SA Kill Score
--saactive - SA active?
--vacation - Is on vacation?
--vacsubj - Subject of Vacation reply
--vacmsg - Message of Vacation reply
--vacstart - Start of Vacation
--vacend - End of Vacation
--forcepass - Allow changing of locked passwords",
        'alias' => "Alias - Manage Aliases
Available subcommands:
\tadd <email> <goto>
\tdelete <email>
\tupdate <email> -a 1|0 -g <email>
\tlist",
        'awl' => "AWL - Manage Auto-Whitelist
Available subcommands:
\tadd <email>
\tupdate <email> -a 1|0
\tlist
",
        'domain' => "Domain - Manage Domains
Available subcommands:
\tadd
\tdelete
\tupdate
\tlist
",
        'domainalias' => "DomainAlias - Manage alias domains
Available subcommands:
\tadd
\tdelete
\tupdate
\tlist",
        'mailbox' => "Mailbox - Manage users and mailboxes
Available subcommands:
\tadd
\tdelete
\tupdate
\tlist",
        'vacbl' => "Vacation Blacklist - Manage Vacation Blacklist
Available subcommands:
\tadd
\tdelete
\tlist",
        'migrate' => "Migrate Debmin1, Debmin2, Vexim or Postfix.Admin to VBoxAdm
Available subcommands:
\tnone
Available options:
\t--source - Specify source type, either debmin1, debmin2, vexim or postfixadmin
\t--source-db - Specify source db.
",
    );

    return \%help;
}

sub _init_actions {
    my $self = shift;

    my %actions = (
        'alias' => {
            'add' => sub {
                my $email = shift;
                my $goto  = shift;
                print "Add Alias.\n";
                if ( !$email ) {
                    print "Need alias address\n";
                    return;
                }
                if ( !$goto ) {
                    print "Need goto address\n";
                    return;
                }
                my ( $local_part, $domain ) = split /@/, $email;
                my $domain_id = $self->domain()->get_id($domain);
                if ( !$domain_id ) {
                    print "Need valid domain\n";
                    return;
                }
                $self->alias()->create( $local_part, $domain_id, $goto );
                $self->display_messages();
            },
            'update' => sub {
                my $email = shift;
                my $params;
                foreach my $key (qw(IsActive Goto)) {
                    $params->{$key} = $self->opts()->{$key} if defined( $self->opts()->{$key} );
                }
                print "Update Alias.\n";
                $self->alias()->update( $self->alias()->get_id($email), $params );
                $self->display_messages();
            },
            'delete' => sub {
                my $email = shift;
                print "Delete Alias.\n";
                my $alias_id;
                if ( $email =~ m/^\d+$/ ) {
                    $alias_id = $email;
                }
                else {
                    $alias_id = $self->alias()->get_id($email);
                }
                $self->alias()->delete($alias_id);
                $self->display_messages();
            },
            'list' => sub {
                print "Listing Aliases:\n";
                my $format = "%i\t%s\@%s\t%s\t%i\n";
                print "ID\tEmail\tGoto\tIs Active\n";
                foreach my $alias ( $self->alias()->list() ) {
                    printf( $format, @{$alias}{qw(id local_part domain goto is_active)} );
                }
                $self->display_messages();
              }
        },
        'awl' => {
            'add' => sub {
                my $email = shift;
                print "Add AWL.\n";
                $self->awl()->create($email);
                $self->display_messages();
            },
            'update' => sub {
                my $email = shift;
                my $params;
                $params->{Disabled} = !$self->opts()->{IsActive} if defined( $self->opts()->{IsActive} );
                print "Update AWL.\n";
                $self->awl()->update( $self->awl()->get_id($email), $params );
                $self->display_messages();
            },
            'list' => sub {
                print "Listing AWL entries:\n";
                my $format = "%i\t%s\t%i\t%s\n";
                print "ID\tEmail\tDisabled\tLast Seen\n";
                foreach my $awl ( $self->awl()->list() ) {
                    printf( $format, @{$awl}{qw(id email disabled last_seen)} );
                }
                $self->display_messages();
            },
        },
        'domain' => {
            'add' => sub {
                my $domain = shift;
                print "Add Domain.\n";
                $self->domain()->create($domain);
                $self->display_messages();
            },
            'update' => sub {
                my $domain = shift;
                my $params;
                foreach my $key (qw(IsActive)) {
                    $params->{$key} = $self->opts()->{$key} if defined( $self->opts()->{$key} );
                }
                print "Update Domain.\n";
                $self->domain()->update( $self->domain()->get_id($domain), $params );
                $self->display_messages();
            },
            'delete' => sub {
                my $domain = shift;
                print "Delete Domain.\n";
                $self->domain()->delete( $self->domain()->get_id($domain) );
                $self->display_messages();
            },
            'list' => sub {
                print "Listing Domains:\n";
                my $format = "%i\t%s\t%i\n";
                print "ID\tDomain\tIs Active\n";
                foreach my $domain ( $self->domain()->list() ) {
                    printf( $format, @{$domain}{qw(id name is_active)} );
                }
                $self->display_messages();
            },
        },
        'domainalias' => {
            'add' => sub {
                my $domain    = shift;
                my $goto      = shift;
                my $domain_id = $self->domain()->get_id($goto);
                if ( !$domain_id ) {    # no known domain
                    print "Error. Unknown Target Domain.\n";
                    return;
                }
                print "Add DomainAlias.\n";
                $self->domainalias()->create( $domain, $domain_id );
                $self->display_messages();
            },
            'update' => sub {
                my $domain = shift;
                my $params;
                foreach my $key (qw(IsActive Goto)) {
                    if ( defined( $self->opts()->{$key} ) ) {
                        if ( $key eq 'Goto' ) {
                            $params->{$key} = $self->domain()->get_id( $self->opts()->{$key} );
                        }
                        else {
                            $params->{$key} = $self->opts()->{$key};
                        }
                    }
                }
                print "Update DomainAlias $domain.\n";
                $self->domainalias()->update( $self->domainalias()->get_id($domain), $params );
                $self->display_messages();
            },
            'delete' => sub {
                my $domain = shift;
                print "Delete DomainAlias.\n";
                $self->domainalias()->delete( $self->domainalias()->get_id($domain) );
                $self->display_messages();
            },
            'list' => sub {
                print "Listing DomainAliases:\n";
                my $format = "%i\t%s\t%s\t%i\n";
                print "ID\tDomain\tGoto\tIs Active\n";
                foreach my $domain ( $self->domainalias()->list() ) {
                    printf( $format, @{$domain}{qw(id name domain_id is_active)} );
                }
                $self->display_messages();
            },
        },
        'mailbox' => {
            'add' => sub {
                my $email = shift;
                my ( $local_part, $domain ) = split /@/, $email;
                my $domain_id = $self->domain()->get_id($domain);
                if ( !$domain_id ) {

                    # Try to create domain first
                    $self->domain()->create($domain);
                    $domain_id = $self->domain()->get_id($domain);
                }
                if ( !$domain_id ) {
                    print "Unknown Domain. Please create Domain first.\n";
                    return;
                }
                my $params;
                foreach my $key (
                    qw(
                    Password PasswordAgain
                    Name IsActive MaxMsgSize IsSiteadmin IsDomainadmin
                    SAKillScore SAActive
                    IsOnVacation VacationSubject VacationMessage VacationStart VacationEnd
                    )
                  )
                {
                    $params->{$key} = $self->opts()->{$key} if defined( $self->opts()->{$key} );
                }
                print "Add User: $email\n";
                $self->mailbox()->create( $local_part, $domain_id, $params );
                $self->display_messages();
            },
            'update' => sub {
                my $email = shift;
                my $mailbox_id;
                if ( $email =~ m/^\d+$/ ) {
                    $mailbox_id = $email;
                }
                else {
                    $mailbox_id = $self->mailbox()->get_id($email);
                }
                my $params;
                foreach my $key (
                    qw(
                    Password PasswordAgain
                    Name IsActive MaxMsgSize IsSiteadmin IsDomainadmin
                    SAKillScore SAActive
                    IsOnVacation VacationSubject VacationMessage VacationStart VacationEnd
                    ForcePassword
                    )
                  )
                {
                    $params->{$key} = $self->opts()->{$key} if defined( $self->opts()->{$key} );
                }

                # Longer vacation messages can not be given on the commandline, they may also be a file
                if ( $params->{VacationMessage} && -f $params->{VacationMessage} ) {
                    $params->{VacationMessage} = &VWebAdm::Utils::slurp( $params->{VacationMessage} );
                }
                print "Update User: $email\n";

                # locked passwords can not be changed in the web gui but on the CLI
                if ( $self->opts()->{ForcePassword} ) {
                    $params->{'pw_lock_override'} = 1;
                }
                $self->mailbox()->update( $mailbox_id, $params );
                $self->display_messages();
            },
            'delete' => sub {
                my $email = shift;
                print "Delete User: $email\n";
                my $mailbox_id;
                if ( $email =~ m/^\d+$/ ) {
                    $mailbox_id = $email;
                }
                else {
                    $mailbox_id = $self->mailbox()->get_id($email);
                }
                $self->mailbox()->delete($mailbox_id);
                $self->display_messages();
            },
            'list' => sub {
                print "Listing Mailboxes:\n";
                my $format = "%i\t%s\@%s\t%s\t%i\t%f\t%i\t%i\t%i\n";
                print "ID\tEmail\tName\tSA-Kill-Score\tSA-Active\tMax-Msg-Size\tActive\tSiteadmin\tDomainadmin\tVacation\n";
                foreach my $mailbox ( $self->mailbox()->list() ) {
                    printf( $format,
                        @{$mailbox}{qw(id local_part domain sa_kill_score sa_active max_msg_size is_active is_siteadmin is_domainadmin is_on_vacation)} );
                }
                $self->display_messages();
            },
        },
        'vacbl' => {
            'add' => sub {
                my $email = shift;
                print "Add VacationBlacklist entry: $email\n";
                $self->vacationblacklist()->create($email);
                $self->display_messages();
            },
            'delete' => sub {
                my $email = shift;
                print "Delete VacationBlacklist entry.\n";
                $self->vacationblacklist()->delete( $self->vacationblacklist()->get_id($email) );
                $self->display_messages();
            },
            'list' => sub {
                print "List VacationBlacklist entries:\n";
                print "ID\tEmail\n";
                my $format = "%i\t%s\@%s\n";
                foreach my $e ( $self->vacationblacklist()->list() ) {
                    printf( $format, @{$e}{qw(id local_part domain)} );
                }
                $self->display_messages();
            },
        },
    );

    return \%actions;
}

sub display_messages {
    my $self = shift;

    my $format = "[%10s] %s\n";
    foreach my $msg ( $self->msgq()->pop() ) {
        printf( $format, uc( $msg->{'severity'} ), $msg->{'en'} );
    }

    return 1;
}

sub get_similar_module {
    my $self    = shift;
    my $cmd     = shift;
    my $actions = shift;
    my @a       = sort { distance( $cmd, $a ) <=> distance( $cmd, $b ) } keys %{$actions};
    return $a[0];
}

sub get_similar_action {
    my $self    = shift;
    my $cmd     = shift;
    my $module  = shift;
    my $actions = shift;
    my @a       = sort { distance( $cmd, $a ) <=> distance( $cmd, $b ) } keys %{ $self->actions()->{$module} };
    return $a[0];
}

sub migrate {
    my $self = shift;

    if ( !$self->opts()->{'Source'} ) {
        print "Need source-type (--source).\n";
        return;
    }

    if ( !$self->opts()->{'SourceDb'} ) {
        $self->opts()->{'SourceDb'} = $self->config()->{'Source'};
    }

    if ( $self->migration()->migrate( $self->opts()->{'Source'}, $self->opts()->{'SourceDb'}, 'vboxadm', $self->opts() ) ) {

        #print "Migration OK\n" unless $config->{'Quiet'};
        return 1;
    }
    else {

        #print "Migration FAILED\n" unless $config->{'Quiet'};
        return;
    }
}

has 'user' => (
    'is'      => 'rw',
    'isa'     => 'VBoxAdm::Model::User',
    'lazy'    => 1,
    'builder' => '_init_user',
);

sub _init_user {
    my $self = shift;
    my $opts = shift || {};

    if ( $self->opts()->{'Bootstrap'} && $EUID == 0 ) {
        my $User = VBoxAdm::Model::User->new(
            {
                'dbh'        => $self->dbh(),
                'logger'     => $self->logger(),
                'config'     => $self->config(),
                'msgq'       => $self->msgq(),
                'SystemUser' => 1,
            }
        );
        return $User;
    }

    my $conf = $ENV{'HOME'} . '/.vboxadm.cnf';
    my %user_config;
    if ( -f $conf || $self->config()->{'quiet'} ) {
        print "check_login - Reading config from $conf ...\n" if $self->opts()->{'Verbose'};
        read_config $conf => %user_config;
    }
    else {
        print "No .vboxadm.cnf found in your home.\n";
        $user_config{'auth'}{'username'} = $self->ask_string('Please enter the email of an site-admin');
        $user_config{'auth'}{'password'} = $self->ask_string('Please enter the password');
        if ( $self->ask_yesno('Should I create a .vboxadm.cnf for you?') ) {
            write_config %user_config => $conf;
        }
    }

    # check if login works
    if ( !&VWebAdm::Utils::is_valid_address_rfc822( $user_config{'auth'}{'username'} ) ) {
        print "Invalid email address given.\n" unless $self->opts()->{'Quiet'};
        return;
    }
    my $User = VBoxAdm::Model::User::->new(
        {
            'dbh'      => $self->dbh(),
            'logger'   => $self->logger(),
            'config'   => $self->config(),
            'username' => $user_config{'auth'}{'username'},
            'msgq'     => $self->msgq(),
        }
    );
    if ( !$User ) {
        confess("Could not create User object!\n");
    }
    if ( !$User->login( $user_config{'auth'}{'password'} ) ) {
        confess("Password invalid!\n");
    }
    if ( !$User->is_siteadmin() ) {
        confess("You are no siteadmin!\n");
    }
    print "Authorized as site-admin " . $user_config{'auth'}{'username'} . "\n" if $self->opts()->{'Verbose'};
    return $User;
}

sub ask_select {
    my ( $self, $msg, @options ) = @_;

    # let user select on of the options provided
    while (1) {
        print $msg. "\n";
        my $i = 0;
        foreach my $opt (@options) {
            print "[$i] $opt\n";
            $i++;
        }
        my $num = $self->ask_number( 'Print enter any number between 0 and ' . $i . '. Press enter to abort' );
        if ( defined($num) && $options[$num] ) {
            return wantarray ? ( $num, $options[$num] ) : $options[$num];
        }
        else {
            return;
        }
    }
    return;
}

sub ask_yesno {
    my ( $self, $msg ) = @_;
    print $msg. " [y/N]: ";
    ## no critic (ProhibitExplicitStdin)
    my $resp = <STDIN>;
    ## use critic
    chomp($resp);
    if ( $resp =~ m/(1|Yes|Ja|Y)/i ) {
        return 1;
    }
    return;
}

sub ask_number {
    my ( $self, $msg ) = @_;
    print $msg. ": ";
    ## no critic (ProhibitExplicitStdin)
    my $resp = <STDIN>;
    ## use critic
    chomp($resp);
    if ( $resp =~ m/^\s*(\d+)\s*$/ ) {
        return $1;
    }
    return;
}

sub ask_string {
    my ( $self, $msg ) = @_;
    print $msg. ": ";
    ## no critic (ProhibitExplicitStdin)
    my $resp = <STDIN>;
    ## use critic
    chomp($resp);
    return $resp;
}

no Moose;
__PACKAGE__->meta->make_immutable;

1;

__END__

Common opts:
-v - Verbose
-d - Dry
-q - Quiet
-f - Force
-n - Name
-s - Source-DB
-d - Destination-DB
--truncate - Truncate Destination before migration
--bootstrap - If invoked as root user this option skips all password checks.
  This option is required to create the first user in the database (i.e. bootstrap).
--config - Location of config file
-a - Is active?
-g - Goto/Target
-p - Password
-m - Max. Msg. Size in MB
--siteadmin - Is Siteadmin?
--domainadmin - Is Domainadmin?
-k - SA Kill Score
--saactive - SA active?
--vacation - Is on vacation?
--vacsubj - Subject of Vacation reply
--vacmsg - Message of Vacation reply
--vacstart - Start of Vacation
--vacend - End of Vacation
--forcepass - Allow changing of locked passwords

=head1 Mailbox

mailbox add [-p <password>] [-n <name>] <email> - Add a new user/mailbox
mailbox update [-p <password>] [-n <name>] [- ...] <email> - Modify mailbox
mailbox delete <email> - Delete mailbox
mailbox list - List mailboxes

=head1 Alias

alias add <email> <goto> - Add a new <email> alias with <goto> as target(s)
alias update <email> <goto> - Modify alias <email> with <goto> as target(s)
alias delete <email> - Delete alias
alias list - List aliases

=head1 Domain

domain add <domain> - Add a new domain
domain update [...] <domain> - Modify an exisiting domain
domain delete <domain> - Delete a domain
domain list - List domains

=head1 Domain Alias

domainalias add <domain> <goto> - Add <domain> as new alias to <goto>
domainalias update [...] <domain> - Modify a domain alias
domainalias delete <domain> - Delete a domain alias
domainalias list - List domain aliases

=head1 Vacation Blacklist

vacbl add <email> - Add <email> to the list of mailboxes not allowed to trigger a
  vacation reply.
vacbl delete <email> - Delete <email> from the vacation blacklist
vacbl list - List the vacation blacklist

=head1 AWL

awl add <email> - Add <email> to the auto whiteliste
awl update <email> -a 0|1 - Modify a whitelist entry
awl list - List whitelist entries

=head1 Migration

migrate --source <source> --source-db <source-db> - Migrate from <source> format
  (either debmin1, debmin2, vexim of postfixadmin) with <source-db> as data source.

