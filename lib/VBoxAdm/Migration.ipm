package VBoxAdm::Migration;

use strict;
use warnings;

our $VERSION = '@VERSION@';

sub migrate {
    my $dbh         = shift;
    my $config      = shift;
    my $source_type = shift;
    my $source_db   = shift;
    my $target_db   = shift;

    my $sql_new_domain  = "INSERT INTO \`$target_db\`.domains (name,is_active) VALUES(?,?)";
    my $sth_new_domain  = $dbh->prepare($sql_new_domain);
    my $sql_new_alias   = "INSERT INTO \`$target_db\`.aliases (domain_id,local_part,goto,is_active) VALUES(?,?,?,?)";
    my $sth_new_alias   = $dbh->prepare($sql_new_alias);
    my $sql_new_mailbox = "INSERT INTO \`$target_db\`.mailboxes ";
    $sql_new_mailbox .=
"(domain_id,local_part,password,name,is_active,max_msg_size,is_on_vacation,vacation_subj,vacation_msg,is_domainadmin,is_superadmin,sa_active,sa_kill_score) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
    my $sth_new_mailbox      = $dbh->prepare($sql_new_mailbox);
    my $sql_new_domain_alias = "INSERT INTO \`$target_db\`.domain_aliases (name,domain_id,is_active) VALUES(?,?,1)";
    my $sth_new_domain_alias = $dbh->prepare($sql_new_domain_alias);
    my $sql_vacation_status  = "INSERT INTO \`$target_db\`.vacation_notify (on_vacation,notified,notified_at) VALUES(?,?,?)";
    my $sth_vacation_status  = $dbh->prepare($sql_vacation_status);
    my $sql_set_admin        = "UPDATE \`$target_db\`.mailboxes SET is_domainadmin = ?, is_superadmin = ? ";
    $sql_set_admin .= "WHERE local_part = ? AND domain_id = (SELECT id FROM domains WHERE name = ?)";
    my $sth_set_admin = $dbh->prepare($sql_set_admin);

    if ( $config->{'truncate'} ) {
        $dbh->do('TRUNCATE TABLE \`$target_db\`.aliases');
        $dbh->do('TRUNCATE TABLE \`$target_db\`.mailboxes');
        $dbh->do('TRUNCATE TABLE \`$target_db\`.domains');
    }

    ###########################################################################
    # DEBMIN2
    ###########################################################################
    if ( $source_type eq 'debmin2' ) {
        if ( !$source_db ) {
            $source_db = 'sysmgm_ng';
        }
        my $sql_domains = 'SELECT id,domain,is_enabled FROM `' . $source_db . '`.domains ORDER BY domain';
        my $sth_domains = $dbh->prepare($sql_domains);
        my $sql_mailboxes =
            'SELECT local_part,forward,cc,name,pwclear,is_away,away_text,spam_check,is_enabled FROM `'
          . $source_db
          . '`.mail_accounts WHERE domain = ? ORDER BY local_part';
        my $sth_mailboxes = $dbh->prepare($sql_mailboxes);
        $sth_domains->execute();

        #
        # CREATE DOMAINS
        #
      DOMAIN: while ( my ( $old_domain_id, $domain_name, $domain_is_enabled ) = $sth_domains->fetchrow_array() ) {
            my $domain_is_active = 1;
            if ( $domain_is_enabled && $domain_is_enabled =~ m/(no|0)/i ) {
                $domain_is_active = 0;
            }
            $domain_name = lc($domain_name);
            if ( !$config->{'dry'} && $sth_new_domain->execute( $domain_name, $domain_is_active ) ) {
                print "Created new Domain '$domain_name'\n";
            }
            else {
                print "Failed to create new domain '$domain_name': " . $sth_new_domain->errstr . "\n";
                next DOMAIN;
            }
            my $new_domain_id = $dbh->last_insert_id( undef, undef, undef, undef );
            $sth_mailboxes->execute($old_domain_id);

            #
            # CREATE MAILBOXES
            #
          MAILBOX: while ( my @row = $sth_mailboxes->fetchrow_array() ) {
                my ( $local_part, $forward, $cc, $name, $pwclear, $is_away, $away_text, $spam_check, $is_enabled ) = @row;
                $local_part = lc($local_part);
                my $sa_active = 1;
                if ( $spam_check && $spam_check =~ m/(no|0)/i ) {
                    $sa_active = 0;
                }
                my $is_on_vacation = 0;
                if ( $is_away && $is_away =~ m/(yes|1)/i ) {
                    $is_on_vacation = 1;
                }
                my $is_active = 1;
                if ( $is_enabled && $is_enabled =~ m/(no|0)/i ) {
                    $is_active = 0;
                }
                $away_text ||= '';
                if ( !$forward ) {

                    # a real mailbox
                    if (
                        !$config->{'dry'}
                        && $sth_new_mailbox->execute(
                            $new_domain_id, $local_part, VBoxAdm::DovecotPW::make_pass( $pwclear, $config->{'cgi'}{'pwscheme'} ),
                            $name, $is_active, 15360, $is_on_vacation, 'On Vacation', $away_text, 0, 0, $sa_active, 6.31
                        )
                      )
                    {
                        print "\tCreated new Mailbox: $local_part\@$domain_name\n";
                    }
                    else {
                        print "\tFailed to create new Mailbox $local_part\@$domain_name: " . $sth_new_mailbox->errstr . "\n";
                    }
                }
                else {

                    # an alias
                    if ( !$config->{'dry'} && $sth_new_alias->execute( $new_domain_id, $local_part, $forward, $is_active ) ) {
                        print "\tCreated new Alias: $local_part\@$domain_name\n";
                    }
                    else {
                        print "\tFailed to create new Alias $local_part\@$domain_name: " . $sth_new_mailbox->errstr . "\n";
                    }
                }

                # handle cc, too (insert as alias)
                if ($cc) {
                    if ( !$config->{'dry'} && $sth_new_alias->execute( $new_domain_id, $local_part, $cc, $is_active ) ) {
                        print "\tCreated new Alias (CC): $local_part\@$domain_name\n";
                    }
                    else {
                        print "\tFailed to create new Alias (CC) $local_part\@$domain_name: " . $sth_new_mailbox->errstr . "\n";
                    }
                }
            }
        }
        $sth_mailboxes->finish();
        $sth_domains->finish();
    }
    ###########################################################################
    # VEXIM
    ###########################################################################
    elsif ( $source_type eq 'vexim' ) {
        if ( !$source_db ) {
            $source_db = 'vexim';
        }

        #
        # Iterate over all domains, we need the domain_id
        #
        my $query       = 'SELECT domain_id,domain,enabled FROM `' . $source_db . '`.domains';
        my $sth_domains = $dbh->prepare($query);
        $query = "SELECT alias FROM vexim.domainalias WHERE domain_id = ?";
        my $sth_domainalias = $dbh->prepare($query);
        $query =
            'SELECT localpart,clear,smtp,pop,type,admin,on_vacation,enabled,forward,maxmsgsize,quota,realname,vacation,on_spamassassin,sa_refuse FROM `'
          . $source_db
          . '`.users WHERE domain_id = ?';
        my $sth_users = $dbh->prepare($query);

        $sth_domains->execute();
        while ( my ( $old_domain_id, $domain, $is_active ) = $sth_domains->fetchrow_array() ) {

            #
            # Create new domain
            #
            $sth_new_domain->execute( $domain, $is_active ) unless $config->{'dry'};
            my $new_domain_id = $dbh->last_insert_id( undef, undef, undef, undef ) || 1;

            #
            # Convert domain_aliases
            #
            $sth_domainalias->execute($old_domain_id);
            while ( my $domain_alias = $sth_domainalias->fetchrow_array() ) {

                #
                # Create new domain alias
                #
                $sth_new_domain_alias->execute( $domain_alias, $new_domain_id ) unless $config->{'dry'};
            }

            #
            # Convert users/aliases
            #
            $sth_users->execute($old_domain_id);
            while ( my @row = $sth_users->fetchrow_array() ) {
                my (
                    $localpart, $pwclear,    $smtp,  $pop,      $type,         $admin,     $on_vacation, $enabled,
                    $forward,   $maxmsgsize, $quota, $realname, $vacation_msg, $sa_active, $sa_kill_score,
                ) = @row;
                my $is_siteadmin   = 0;
                my $is_domainadmin = 0;
                my $is_alias       = 0;
                my $is_local       = 0;
                $vacation_msg ||= '';
                $vacation_msg = trim($vacation_msg);
                if ( $type eq 'site' && $admin ) {
                    $is_siteadmin = 1;
                }
                if ( $type eq 'local' && $admin ) {
                    $is_domainadmin = 1;
                }
                if ( $type eq 'alias' ) {
                    $is_alias = 1;
                    $forward  = $smtp;
                    $forward  = trim($forward);
                    $forward =~ s/\s+/,/g;
                }
                if ( $type eq 'local' ) {
                    $is_local = 1;
                }
                if ( $type eq 'local' && $forward ) {
                    $is_alias = 1;
                }
                if ($is_alias) {
                    $sth_new_alias->execute( $new_domain_id, $localpart, $forward, $enabled ) unless $config->{'dry'};
                    print "New Alias: $new_domain_id, $localpart, $forward, $enabled\n";
                }
                if ($is_local) {
                    $sth_new_mailbox->execute(
                        $new_domain_id, $localpart, VBoxAdm::DovecotPW::make_pass( $pwclear, $config->{'cgi'}{'pwscheme'} ),
                        $realname, $enabled, $maxmsgsize, $on_vacation, 'Out of Office',
                        $vacation_msg, $quota, $is_domainadmin, $is_siteadmin, $sa_active, $sa_kill_score,
                    ) unless $config->{'dry'};
                    print
"New Mailbox: $new_domain_id, $localpart, $pwclear, $realname, $enabled, $maxmsgsize, $on_vacation,'$vacation_msg',$quota,$is_domainadmin,$is_siteadmin\n";
                }
            }
        }
        $sth_domains->finish();
        $sth_domainalias->finish();
        $sth_users->finish();
    }
    ###########################################################################
    # POSTFIXADMIN
    ###########################################################################
    elsif ( $source_type eq 'postfixadmin' ) {
        if ( !$source_db ) {
            $source_db = 'postfix';
        }
        my $sql_domains         = "SELECT domain, active FROM domain ORDER BY domain";
        my $sth_domains         = $dbh->prepare($sql_domains);
        my $sql_alias_domains   = "SELECT alias_domain, active FROM alias_domain WHERE target_domain = ? ORDER BY alias_domain";
        my $sth_alias_domains   = $dbh->prepare($sql_alias_domains);
        my $sql_mailboxes       = "SELECT local_part, password, name, quota, active FROM mailbox WHERE domain = ?";
        my $sth_mailboxes       = $dbh->prepare($sql_mailboxes);
        my $sql_domain_admin    = "SELECT username, domain FROM domains_admins WHERE active = 1";
        my $sth_domain_admin    = $dbh->prepare($sql_domain_admin);
        my $sql_vacation        = "SELECT subject, body FROM vacation WHERE email = ?";
        my $sth_vacation        = $dbh->prepare($sql_vacation);
        my $sql_vacation_notify = "SELECT on_vacation, notified, notified_at FROM vacation_notification WHERE notified_at > NOW() - INTERVAL 1 MONTH";
        my $sth_vacation_notify = $dbh->prepare($sql_vacation_notify);

        #
        # Domains and Mailboxes
        #
        $sth_domains->execute();
        while ( my ( $domain, $is_active ) = $sth_domains->fetchrow_array() ) {

            # create a new domain
            $sth_new_domain->execute( $domain, $is_active ) unless $config->{'dry'};
            my $new_domain_id = $dbh->last_insert_id( undef, undef, undef, undef ) || 1;
            $sth_mailboxes->execute($domain);
            while ( my @row = $sth_mailboxes->fetchrow_array() ) {
                my ( $local_part, $password, $name, $quota, $is_active ) = @row;
                my $is_on_vacation = 0;
                my $vacation_subj  = '';
                my $vacation_msg   = '';
                my $sa_active      = 1;
                my $sa_kill_score  = 6.31;
                my $is_domainadmin = 0;
                my $is_siteadmin   = 0;
                my $maxmsgsize     = 15 * 1024 * 1024;
                my $email          = $local_part . '@' . $domain;

                # process each mailbox
                # vacation status
                if ( $sth_vacation->execute($email) ) {
                    my ( $subj, $msg ) = $sth_vacation->fetchrow_array();
                    if ( $subj && $msg ) {
                        $is_on_vacation = 1;
                        $vacation_subj  = $subj;
                        $vacation_msg   = $msg;
                    }
                }
                $sth_new_mailbox->execute( $new_domain_id, $local_part, VBoxAdm::DovecotPW::make_pass( $password, $config->{'cgi'}{'pwscheme'} ),
                    $name, $is_active, $maxmsgsize, $is_on_vacation, $vacation_subj, $vacation_msg, $quota, $is_domainadmin, $is_siteadmin, $sa_active,
                    $sa_kill_score, )
                  unless $config->{'dry'};
                print
"New Mailbox: $new_domain_id, $local_part, $password, $name, $is_active, $maxmsgsize, $is_on_vacation,'$vacation_msg',$quota,$is_domainadmin,$is_siteadmin\n";
            }

            # domains aliases
            $sth_alias_domains->execute($domain);
            while ( my ( $domain_alias, $is_active ) = $sth_alias_domains->fetchrow_array() ) {

                # create new alias domain
                $sth_new_domain_alias->execute( $domain_alias, $new_domain_id ) unless $config->{'dry'};
            }
        }

        # vacation notify
        $sth_vacation_notify->execute();
        while ( my ( $on_vacation, $notified, $notified_at ) = $sth_vacation_notify->fetchrow_array() ) {

            # insert vacation status
            $sth_vacation_status->execute( $on_vacation, $notified, $notified_at );
        }

        # domainadmins
        $sth_domain_admin->execute();
        while ( my ( $email, $domain ) = $sth_domain_admin->fetchrow_array() ) {
            my ( $local_part, $domain ) = split( /@/, $email );

            # update this user, set is_domainadmin = 1
            $sth_set_admin->execute( 1, 0, $local_part, $domain );

        }

        $sth_domains->finish();
        $sth_alias_domains->finish();
        $sth_mailboxes->finish();
        $sth_domain_admin->finish();
        $sth_vacation->finish();
        $sth_vacation_notify->finish();
    }
    else {
        print "Invalid source!\n";
        return;
    }

    $sth_new_domain->finish();
    $sth_new_alias->finish();
    $sth_new_mailbox->finish();
    $sth_vacation_status->finish();
    $sth_set_admin->finish();
    $dbh->disconnect();
    return 1;
}

1;
__END__

=head1 NAME

VBoxAdm::Migration - migration methods to VBoxAdm

=head1 VERSION

This documentation refers to VBoxAdm::Migration version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Migration;

=head1 DESCRIPTION

This class provides migration methods.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
