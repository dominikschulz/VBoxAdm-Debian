package VBoxAdm::Model::Domain;

use strict;
use warnings;

use Carp;

use Sys::Syslog;
use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';

use base qw(VBoxAdm::Model);
use Class::Std;
{

    # Attributes
    my %fields_of : ATTR;

    sub BUILD {
        my ( $self, $ident, $arg_ref ) = @_;

        if ( !$self->user || !$self->user->is_user() ) {
            return;    # Need user object
        }

        $fields_of{$ident} = [qw(id name is_active)];
    }

    sub create {
        my ( $self, $domain ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_siteadmin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }

        $domain = &VBoxAdm::Utils::trim( lc($domain) );

        if ( $domain && !&VBoxAdm::Utils::is_valid_domain_rfc822($domain) ) {
            $self->msg->push( 'error', 'Invalid syntax. Domain is not RFC822 compliant!' );
            return;
        }
        elsif ($domain) {
            my $query = "INSERT INTO domains (name,is_active) VALUES(?,1)";

            if ( my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $query, $domain ) ) {
                $self->msg->push( 'information', "Domain '[_1]' added", $domain );
                $sth->finish();
                return 1;
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $query, $domain, $self->dbh->errstr );
                $self->msg->push( 'error', "Failed to add Domain '[_1]'. Database error.", $domain );
                return;
            }

        }
        else {
            $self->msg->add( 'error', "Failed to add Domain [_1]. Insufficient parameters.", $domain );
            return;
        }
    }

    sub delete {
        my ( $self, $domain_id ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_siteadmin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }

        my $sql = "DELETE FROM domains WHERE id = ? LIMIT 1";
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, $domain_id );

        if ( !$sth ) {
            $self->msg->push( 'error', 'Database error.' );
            return;
        }

        $sth->finish();

        return;
    }

    sub update {
        my ( $self, $domain_id, $params ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_siteadmin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }

        my $domain_name = $self->get_name($domain_id);

        my $sql  = "UPDATE domains SET ";
        my @args = ();

        if ( defined( $params->{'IsActive'} ) ) {
            $sql .= "is_active = ? ";
            if ( $params->{'IsActive'} ) {
                push( @args, 1 );
            }
            else {
                push( @args, 0 );
            }
        }

        if ( scalar(@args) > 0 ) {
            $sql .= "WHERE id = ?";
            push( @args, $domain_id );
            if ( my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, @args ) ) {
                $sth->finish();
                $self->msg->push( 'information', 'Updated Domain [_1].', $domain_name );
                return 1;
            }
            else {
                $self->log( 'Could not execute Query: %s, Args: %s, Error: %s', $sql, join( ',', @args ), $self->dbh->errstr );
                $self->msg->push( 'error', 'Failed to update Domain [_1]. Database error.', $domain_name );
                return;
            }
        }
    }

    sub read {
        my ( $self, $id ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_siteadmin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }

        return $self->_read( 'domains', $id, $fields_of{$ident} );
    }

    sub list {
        my ( $self, $params ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_admin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }
        elsif ( $self->user->is_domainadmin() ) {

            # limit to this domain
            $params->{'id'} = $self->user->get_domain_id();
        }

        return $self->_list( 'domains', $fields_of{$ident}, $params );
    }

    sub get_name {
        my ( $self, $id ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_admin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }

        my $query = "SELECT name FROM domains WHERE id = ?";
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $query, $id );

        if ( !$sth ) {
            $self->msg->push( 'error', 'Database error.' );
            return;
        }

        my $domain_name = $sth->fetchrow_array();
        $sth->finish();

        return $domain_name;
    }

    sub get_id {
        my ( $self, $name ) = @_;
        my $ident = ident $self;

        # Authorization - No access for regular users
        if ( !$self->user->is_admin() ) {
            $self->msg->push( 'error', 'Sorry. No access for regular users.' );
            return;
        }

        my $query = "SELECT id FROM domains WHERE name = ?";
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $query, $name );

        if ( !$sth ) {
            $self->msg->push( 'error', 'Database error.' );
            return;
        }

        my $domain_id = $sth->fetchrow_array();
        $sth->finish();

        return $domain_id;
    }
}
1;
__END__

=head1 NAME

VBoxAdm::Model::Domain - Class for Domains

=head1 VERSION

This documentation refers to VBoxAdm::Model::Domain version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::Domain;

=head1 DESCRIPTION

This class provides common DB methods.

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
