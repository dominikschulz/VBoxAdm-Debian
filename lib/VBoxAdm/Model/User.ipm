package VBoxAdm::Model::User;

use strict;
use warnings;
use Carp;

use VBoxAdm::DB '@VERSION@';
use VBoxAdm::Utils '@VERSION@';
use VBoxAdm::SaltedHash '@VERSION@';

use base qw(VBoxAdm::Model);
use Class::Std;
{

    # Attributes
    my %data_of : ATTR;

    sub BUILD {
        my ( $self, $ident, $arg_ref ) = @_;
        if ( !$self->dbh || !$self->dbh->ping() ) {
            die("Need DBH connection!");
        }

        # SystemUser is used (only) for bootstrap where no users does exist, yet.
        if ( $arg_ref->{'SystemUser'} ) {
            $data_of{$ident}{'domainadmin'} = 1;
            $data_of{$ident}{'siteadmin'}   = 1;
            $data_of{$ident}{'local_part'}  = 'root';
            $data_of{$ident}{'domain'}      = 'localhost';
            $data_of{$ident}{'id'}          = 0;
            $data_of{$ident}{'domain_id'}   = 0;
        }

        # ForceLogin is used when we know that a login is ok, but we don't have the (plaintext) password
        elsif ( !$self->check_login( $arg_ref->{'Username'}, $arg_ref->{'Password'}, $arg_ref->{'ForceLogin'} ) ) {
            die("Need valid username and password.");
        }
    }

    sub check_login : PRIVATE {
        my ( $self, $username, $password, $force ) = @_;
        my $ident = ident $self;

        # check if login works
        if ( !&VBoxAdm::Utils::is_valid_address_rfc822($username) ) {
            print "Invalid email address given.\n" unless $self->config->{'quiet'};
            return;
        }
        my ( $local_part, $domain ) = split /@/, $username;
        my $sql =
"SELECT m.id,m.password,m.is_domainadmin,m.is_superadmin,d.id FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.local_part = ? AND d.name = ?";
        my $sth = &VBoxAdm::DB::prepexec( $self->dbh, $sql, $local_part, $domain );

        if ( !$sth ) {
            $self->msg->push( 'error', 'Database error.' );
            return;
        }

        my ( $id, $pw, $is_da, $is_sa, $domain_id ) = $sth->fetchrow_array();
        $sth->finish();
        if ( !$force && !&VBoxAdm::SaltedHash::verify_pass( $password, $pw ) ) {
            print "Password invalid!\n" unless $self->config->{'quiet'};
            return;
        }
        $data_of{$ident}{'domainadmin'} = $is_da;
        $data_of{$ident}{'siteadmin'}   = $is_sa;
        $data_of{$ident}{'local_part'}  = $local_part;
        $data_of{$ident}{'domain'}      = $domain;
        $data_of{$ident}{'id'}          = $id;
        $data_of{$ident}{'domain_id'}   = $domain_id;
    }

    sub get_name : STRINGIFY {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'local_part'} . '@' . $data_of{$ident}{'domain'};
    }

    sub get_local_part {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'local_part'};
    }

    sub get_domain {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'domain'};
    }

    sub get_domain_id {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'domain_id'};
    }

    sub get_id : NUMERIFY {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'id'};
    }

    sub is_domainadmin {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'domainadmin'};
    }

    sub is_siteadmin {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'siteadmin'};
    }

    sub is_admin {
        my ($self) = @_;
        my $ident = ident $self;
        return $data_of{$ident}{'domainadmin'} + $data_of{$ident}{'siteadmin'};
    }

    sub is_user : BOOLIFY {
        my ($self) = @_;

        # a successfully created class means that the user is a valid user
        return 1;
    }
}
1;
__END__

=head1 NAME

VBoxAdm::Model::User - Class for Users.

=head1 VERSION

This documentation refers to VBoxAdm::Model::User version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Model::User;

=head1 DESCRIPTION

TODO

=head1 DEPENDENCIES

DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
