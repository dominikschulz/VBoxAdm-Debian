package VBoxAdm::SMTP::Proxy;

use strict;
use warnings;

use Carp;

use IO::File;
use Time::HiRes qw(time);
use List::Util qw(shuffle);

use VWebAdm::Utils '@VERSION@';
use VWebAdm::DB '@VERSION@';

our $VERSION = '@VERSION@';

use base qw(Net::Server::PreFork);

sub logger {
    my $self = shift;

    return $self->{'server'}->{'logger'};
}

############################################
# Usage      : ????
# Purpose    : ????
# Returns    : ????
# Parameters : ????
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub db_connect {
    my $self = shift;

    my $user = $self->{server}->{vbox}->{dbuser} || 'vboxadm';
    my $pass = $self->{server}->{vbox}->{dbpass} || 'vboxadm';
    my $host = $self->{server}->{vbox}->{dbhost} || 'localhost';
    my $port = $self->{server}->{vbox}->{dbport} || 3306;
    my $db   = $self->{server}->{vbox}->{dbdb}   || 'vboxadm';

    if ( $self->{server}->{vbox}->{nodb} ) {

        # no db connection is created in nodb mode
        return 1;
    }

    # if more than one dbhost is given shuffle the list
    # and try each one until a connection succeeds, use short timeout
    # use guarding alarm timer
    my $dsn = "DBI:mysql:database=$db;user=$user;password=$pass;port=$port;host=";
    foreach my $host ( shuffle @{ $self->{server}->{vbox}->{dbhosts} } ) {
        $self->{server}->{vbox}->{dbh} = VBoxAdm::DB::connect( $dsn . $host, { ConnectTimeout => 10, } ) and last;
    }
    if ( !$self->{server}->{vbox}->{dbh} ) {
        my $msg = "Could not connect to DB with DSN $dsn - Hosts: " . join( ',', @{ $self->{server}->{vbox}->{dbhosts} } ) . " - DBI Error: " . DBI->errstr;
        $self->logger()->log( message => $msg, level => 'error', );
        croak $msg;
    }

    return 1;
}
############################################
# Usage      : ????
# Purpose    : ????
# Returns    : ????
# Parameters : ????
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub prepare_queries {
    my $self = shift;

    return 1;
}

############################################
# Usage      : invoked by Net::Server
# Purpose    : called when a new child is created, setup db connections
# Returns    : always true
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub child_init_hook {
    my $self = shift;

    # setup my env
    # getpwuid reads /etc/passwd, field 7 is the home dir
    my $homedir = ( getpwuid($>) )[7];

    # DGR: We want the global effect of this assignment
    ## no critic (RequireLocalizedPunctuationVars)
    $ENV{'HOME'} = $homedir;
    ## use critic
    if ( $self->logger()->filename() && !-w $self->logger()->filename() ) {
        $self->log( 2, "Can not write to logfile at " . $self->logger()->filename() . ". Killing Parent!" );
        $self->close_parent();
        croak "Can not write logfile at " . $self->logger()->filename() . ". Check permissions!";
    }

    $self->logger()->log( message => "Homedir set to $homedir", level => 'debug', );

    if ( !$self->db_connect() ) {
        $self->logger()->log( message => "Could not connect to db!", level => "error", );
        return;
    }
    if ( !$self->prepare_queries() ) {
        $self->logger()->log( message => "Could not prepare queries!", level => 'error', );
        return;
    }

    return 1;
}

############################################
# Usage      : invoked by Net::Server
# Purpose    : called when a child has reached the end of its lifetime, tear down db connections
# Returns    : always true
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub child_finish_hook {
    my $self = shift;

    if ( !$self->{server}->{vbox}->{nodb} ) {
        foreach my $key ( keys %{ $self->{server}->{vbox}->{sth} } ) {
            $self->{server}->{vbox}->{sth}->{$key}->finish();
        }

        # Disconnect from DB
        if ( $self->{server}->{vbox}->{dbh} ) {
            $self->{server}->{vbox}->{dbh}->disconnect();
        }
    }

    return 1;
}

############################################
# Usage      : invoked by Net::Server
# Purpose    : handle a new incoming request
# Returns    : true if the request was processed fine
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub process_request {
    my $self = shift;

    $self->logger()->log( message => "Not implemented", level => 'error' );

    return;
}

1;
__END__

=head1 NAME

VBoxAdm::SMTP::Proxy - Spam Filtering SMTP-Proxy for VBoxAdm

=head1 VERSION

This documentation refers to VBoxAdm::SMTP::Proxy version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::SMTP::Proxy;

=head1 SCHEMA

 Internet -> Postfix1 (Client) -> smtpproxy -> Postfix2 (Server)

=head1 DESCRIPTION

The smtp-proxy listens on the port configured in its configuration file
and sends the command it recieves on the the SMTP-Server specified also
in its configuration file. The SMTP commands and replies from the server
are passed on unmodified until the client send the end-of-data command
(a single dot "." on a line of its own). The the proxy first checks
the message size against the max message size for the recipients and
if that test passes it checks the spam rating. If SpamAssassin reports
a spam rating above the lowest spam kill score of all recipients the
message if blocked at SMTP level (no bounce is generated on our side).

All mails are rewritten while they pass through this proxy so even clean mails
get SpamAssassin headers for later inspection.

You can control the ressource usage of this application by tuning the
variables min_server, max_servers et. al. See the documentation
of Net::Server::PreFork for more details. Basically this application
will create a SpamAssasin instance, precompile the rules and fork
of as many children as specified. These children live for some time,
handle the requests the parent receives and die when they've done
enough work. The the parent will spawn a new children. If there a too much
incoming requests the server will spawn new children until max_servers
if reached. This is very much like the behaviour of the Apache HTTPD
prefork worker.

=head1 WARNING

This application is designed as an intermediate component. Do not place it
in an exposed position where everyone can talk to it. Put it between
a sandwich of two postfix instances as suggested by the sample
configuration distributed with this application.

=head1 PERFORMANCE NOTES

This application is designed with some very specific assumptions in mind:
Executing perl is very expensive, forking perl is somewhat expensive
(although highly optimized), messages will vary in size and memory usage
is more imporant than CPU-utilization. It uses apache-style preforking
(through Net::Server::PreFork) to reduce the need to fork perl instances.
Controlled child restarts reduce the effect of resource leaks in its
children. The message passed through is bufferd in an unlinked tempfile
in /tmp, which SHOULD by a tmpfs large enough to hold max_servers * max_msg_size
of data. This prevents the allocation overhead associated with large strings
and ensures that space will be returned to the OS as soon as possible.

=head1 CACHING

User information from the database is cached in each fork of this script
so the number of database lookups is reduced. This causes two possible problems:
1) the ram usage will grow if too many data is cached and 2) changes to the database
won't immedeate effect. The severity of both issues can decreased by keeping
the number of requests per instance reasonably low. 

=head1 CONFIGURATION AND ENVIRONMENT

The configuration file should be place either in /etc/vboxadm.conf or
in /etc/vboxadm/vboxadm.conf. This is a common configuration file
for the whole suite of VBoxAdm applications. Each part of this suite
has its own section in the config file and all use the values
from the default section when appropriate.

=head2 default
The default section should contain at least the database configuration.

dbuser - The user used to connect to the MySQL database.
dbpass - This users password.
dbdb - The db used by this application.
dbhost - The MySQL database host, usually localhost.

=head2 smtpproxy

listen - Hostname:Port - Listen on this hostname (or IP) and port for
incoming SMTP dialogs.
connect - Hostname:Port - Connect to this hostname (or IP) and port
to forward the SMTP.
pidfile - This applications pidfile.
user - The user this application should run as.
group - The group this application should run as.
max_msg_size - The overall max. message size.
sa_max_msg_size - The max. size of messages SpamAssassin will scan.
sa_timeout - The SpamAssassin scan timeout.
min_servers - Start at least this much children.
max_servers - Run no more than this number of children.
min_spare_servers - Min. spare Children.
max_spare_servers - Max. spare Children.
max_requests - Each children will complete this much requests and than exit.

=head1 DEPENDENCIES

VBoxAdm::Utils, VBoxAdm::SMTP::Proxy, VBoxAdm::SMTP::Client, VBoxAdm::SMTP::Server.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

This implementation was previously based on smtpproxy but switched to
Net::Server::PreFork later. Large parts of this code are based on the ideas
of SpamPD, which is itself based on smtpprox, but all code was written by myself.
The SMTP Classes are modeled closely after MSDW::SMTP::*.

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
