use Test::More qw( no_plan );
use VBoxAdm::Utils '@VERSION@';

BEGIN { use_ok( 'VBoxAdm::Utils', '@VERSION@' ); }

# Special values to test
# 0, 0E0, 0.0 and '0 but true'
# undef, lists of undef

# trim()
is( VBoxAdm::Utils::trim("   hello, blaa    \t \n \r \f"), "hello, blaa", "trim() - '   hello, blaa  ' => 'hello, blaa'" );

# trim2()
is( VBoxAdm::Utils::trim2("  key = value # comment   \r\n"), "key = value", 'trim2() - "  key = value # comment   " => "key = value"' );

# Test extract_recipients
{
    my %data = (
        'user1@domain.tld, <user2@domain.tld>, Mr. USer <User3@domain.tld>, <root@localhost>' =>
          [qw(user1@domain.tld user2@domain.tld user3@domain.tld root@localhost)],
        'user1@domain.tld user2@domain.tld' => [qw(user1@domain.tld user2@domain.tld)],
        'user1@domain.tld;user2@domain.tld' => [qw(user1@domain.tld user2@domain.tld)],
    );
    foreach my $string ( keys %data ) {
        my @expect = @{ $data{$string} };
        my @emails = &VBoxAdm::Utils::extract_recipients($string);
        foreach my $i ( 0 .. $#expect ) {
            is( lc( $emails[$i] ), lc( $expect[$i] ), 'extract_recipients - ' . $expect[$i] . ' equals expectation in regular test.' );
        }
        is( scalar(@emails), scalar(@expect), 'Number of recipients is equal in regular test.' );
    }
    %data = (
        'user1+ext1@domain.tld, <user2+ext2@domain.tld>, Mr. USer <User3+ext3@domain.tld>, <root+rootext@localhost>' => {
            'recipients' => [qw(user1@domain.tld user2@domain.tld user3@domain.tld root@localhost)],
            'delim'      => '+',
        },
        'user4+ext4@domain.tld, <user2+ext2@domain.tld>, Mr. USer <User3+ext3@domain.tld>, <root+rootext@localhost>' => {
            'recipients' => [qw(user4+ext4@domain.tld user2+ext2@domain.tld user3+ext3@domain.tld root+rootext@localhost)],
            'delim'      => undef,
        },
    );
    foreach my $string ( keys %data ) {
        my @expect = @{ $data{$string}{'recipients'} };
        my $delim  = $data{$string}{'delim'};
        my @emails = &VBoxAdm::Utils::extract_recipients( $string, $delim );
        foreach my $i ( 0 .. $#expect ) {
            is( lc( $emails[$i] ), lc( $expect[$i] ), 'extract_recipients - ' . $expect[$i] . ' equals expectation in delim test.' );
        }
        is( scalar(@emails), scalar(@expect), 'Number of recipients is equal in delim test.' );
    }
}

# Test slurp
# Test is_valid_address_rfc822
# Test is_valid_addresses_rfc822
# Test is_valid_localpart_rfc822
# Test is_valid_domain_rfc822
{
    my %data = (
        'denic.de'         => 1,
        '__04aX  asdf.com' => 0,
    );
    foreach my $input ( keys %data ) {
        my $valid = $data{$input};
        if ($valid) {
            ok( &VBoxAdm::Utils::is_valid_domain_rfc822($input), $input . ' is a valid domain.' );
        }
        else {
            ok( !&VBoxAdm::Utils::is_valid_domain_rfc822($input), $input . ' is not a valid domain.' );
        }
    }
}

# Test unroll_recipient
{
    my %data = (
        'admin#domain.tld@vacation.domain.tld'      => 'admin@domain.tld',
        'admin#test#domain.tld@vacation.domain.tld' => 'admin#test@domain.tld',
        'admin+test#domain.tld@vacation.domain.tld' => 'admin+test@domain.tld',
    );
    foreach my $rolled ( keys %data ) {
        my $unrolled = &VBoxAdm::Utils::unroll_recipient($rolled);
        my $expected = $data{$rolled};
        is( $unrolled, $expected, $expected . ' equals ' . $unrolled );
    }
}
